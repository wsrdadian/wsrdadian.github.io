<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>卡恩思欧的博客</title>
  
  <subtitle>不爱撸猫的摄影师不是好程序猿</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wsrdadian.github.io/"/>
  <updated>2019-03-12T09:02:24.095Z</updated>
  <id>https://wsrdadian.github.io/</id>
  
  <author>
    <name>WSR</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Metronic学习之路(二)</title>
    <link href="https://wsrdadian.github.io/2019/03/12/Metronic%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF-%E4%BA%8C/"/>
    <id>https://wsrdadian.github.io/2019/03/12/Metronic学习之路-二/</id>
    <published>2019-03-12T08:09:16.000Z</published>
    <updated>2019-03-12T09:02:24.095Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Metronic学习之路(一)</title>
    <link href="https://wsrdadian.github.io/2019/03/12/Metronic%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF-%E4%B8%80/"/>
    <id>https://wsrdadian.github.io/2019/03/12/Metronic学习之路-一/</id>
    <published>2019-03-12T01:42:47.000Z</published>
    <updated>2019-03-12T09:25:21.851Z</updated>
    
    <content type="html"><![CDATA[<p>使用GULP构建工具对Metronic进行管理</p><h1 id="部署gulp"><a href="#部署gulp" class="headerlink" title="部署gulp"></a>部署gulp</h1><ol><li>打开终端并进入到 Metronic 的 theme 根目录，运行以下代码<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install //安装程序的依赖包</span><br></pre></td></tr></table></figure></li></ol><ul><li>发现 <em>npm install</em> 报 <em>node-sass</em> 错误<br>原因: <em>npm install</em> 的时候所下载的 <em>node-sass</em> 文件夹是空的<br>在 <em>C:\Users\admin\AppData\Roaming\npm-cache\node-sass\3.13.1</em> 下面可以看到<br>解决方法:自己单独用 <em>npm i node-sass</em> 下载一遍<br>会在 <em>C:\Users\姓名AppData\Roaming\npm-cache\node-sass\4.7.2</em> 下面会有一个文件<br><em>win32-x64-57_binding.node</em> ,把这个文件复制到 <em>3.13.1</em> 下面然后重新 <em>npm install</em> 就解决了</li></ul><ol start="2"><li><p>全局安装gulp</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install gulp -g</span><br></pre></td></tr></table></figure></li><li><p>测试 <em>gulp</em>，在终端输入 gulp</p></li></ol><ul><li><p>报错 <em>Cannot find module ‘gulp-prettify’</em> 模块找不到<br>进入 <a href="https://www.npmjs.com" target="_blank" rel="noopener">npm</a>  搜索包名并安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i gulp-prettify</span><br></pre></td></tr></table></figure></li><li><p>再次执行 gulp 命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gulp</span><br></pre></td></tr></table></figure></li><li><p>出现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ gulp</span><br><span class="line">[09:53:07] Using gulpfile F:\web\metronic_v4.5.2\theme\gulpfile.js</span><br><span class="line">[09:53:07] Task never defined: default</span><br><span class="line">[09:53:07] To list available tasks, try running: gulp --tasks</span><br></pre></td></tr></table></figure></li><li><p>说明 gulp 部署成功，只是默认任务还没有配置,需要看看 <em>gulpfile.js</em> 列出的其他任务。</p></li></ul><ol start="4"><li>如果有其他问题，请参考<br><a href="https://segmentfault.com/a/1190000006804354?_ea=1135407" target="_blank" rel="noopener">初探前端自动化神器（Gulp）</a><br><a href="https://www.cnblogs.com/telwanggs/p/7065414.html" target="_blank" rel="noopener">Bootstrap 之 Metronic 模板的学习之路 - （7）GULP 前端自动化工具</a></li></ol><h1 id="gulp-任务运用"><a href="#gulp-任务运用" class="headerlink" title="gulp 任务运用"></a>gulp 任务运用</h1><h2 id="gulp-localhost"><a href="#gulp-localhost" class="headerlink" title="gulp localhost"></a>gulp localhost</h2><ul><li><p>安装 <em>Connect</em> 插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install--save-dev gulp-connect</span><br></pre></td></tr></table></figure></li><li><p><em>npm install –save-dev</em> 可以简化为 <em>npm i -D</em></p></li><li><p>为 web 服务器定义一个任务， <em>gulpfile.js</em> 文件中添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gulp.task(&apos;localhost&apos;, function() &#123;</span><br><span class="line">  connect.server();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>只要在终端/命令行中执行 gulp, 就可以启动 web 服务器，然后可以在浏览器中打开 <em>localhost:8080</em></p></li></ul><h2 id="gulp-localhost-live"><a href="#gulp-localhost-live" class="headerlink" title="gulp localhost-live"></a>gulp localhost-live</h2><ul><li>给 <em>connect.server()</em> 方法传入一个参数<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">gulp.task(&apos;localhost-live&apos;, function() &#123;</span><br><span class="line">  connect.server(&#123;</span><br><span class="line">    livereload: true</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h1 id="SASS-编译"><a href="#SASS-编译" class="headerlink" title="SASS 编译"></a>SASS 编译</h1><h2 id="gulp-sass"><a href="#gulp-sass" class="headerlink" title="gulp sass"></a>gulp sass</h2><p>打开终端进入到 <em>gulpfile.js</em> 所在的 <em>theme</em> 目录。输入 <em>gulp sass</em> 命令执行手工构建任务。</p><ol><li>发现报错 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">It&apos;s not clear which file to import for &apos;@import &quot;file&quot;&apos;.</span><br></pre></td></tr></table></figure></li></ol><ul><li>由于 sass <em>_filename.scss</em> 不允许出现 同名无下划线 <em>filename.scss</em> ,写文件全称试试</li><li>解决：<em>components-md.scss</em> 中<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@import &apos;_components.scss&apos;;</span><br></pre></td></tr></table></figure></li></ul><ol start="2"><li>继续执行 <em>gulp sass</em>,发现报错<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Message:</span><br><span class="line">    sass\global\_components.scss</span><br><span class="line">Error: Import directives may not be used within control directives or mixins.</span><br><span class="line">        on line 7 of sass/global/_components.scss</span><br><span class="line">        from line 8 of sass/global/components-md.scss</span><br></pre></td></tr></table></figure></li></ol><ul><li><p>解决：<em>_components.scss</em> 中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// General CSS Reset</span><br><span class="line">@if $theme-style == &quot;square&quot; &#123; </span><br><span class="line">@import &apos;components/_reset-rounds&apos;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>去掉 <em>@if</em> 判断</p></li></ul><ol start="3"><li>继续执行 <em>gulp sass</em> ,出现新的报错<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Error: Undefined variable: &quot;$general-border-radius&quot;.</span><br><span class="line">       on line 134 of sass/apps/inbox.scss</span><br><span class="line">       border-radius: $general-border-radius;</span><br></pre></td></tr></table></figure></li></ol><ul><li><p>解决：<em>global/_variables.scss</em> 中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@if $theme-type == &quot;material-design&quot; &#123;</span><br><span class="line">$general-border-radius:       2px !default;</span><br><span class="line">&#125; @else &#123;</span><br><span class="line">$general-border-radius:       4px !default;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在 <em>@if</em> 前添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$general-border-radius:       2px !default;</span><br></pre></td></tr></table></figure></li></ul><ol start="4"><li>继续执行 <em>gulp sass</em> ,出现新的报错<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">The following tasks did not complete: testGulp </span><br><span class="line">Did you forget to signal async completion?</span><br></pre></td></tr></table></figure></li></ol><ul><li>官方方法<br>在不使用文件流的情况下，向task的函数里传入一个名叫done的回调函数，以结束task。<a href="https://blog.csdn.net/weixin_40817115/article/details/81079507" target="_blank" rel="noopener">参考</a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gulp.task(&apos;testGulp&apos;, done =&gt; &#123;</span><br><span class="line">  console.log(&apos;Hello World!&apos;);</span><br><span class="line">  done();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h2 id="gulp-sass-watch"><a href="#gulp-sass-watch" class="headerlink" title="gulp sass:watch"></a>gulp sass:watch</h2><ol><li>输入 <em>gulp sass:watch</em> 运行 scss 实时监控 css 文件的编译，编译后的 css 文件会输出到 <em>assets</em> 目录。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Error: watching ./sass/**/*.scss: watch task has to be a function (optionally generated by using gulp.parallel or gulp.series)</span><br><span class="line">    at Gulp.watch (F:\web\metronic_v4.5.2\theme\node_modules\gulp\index.js:28:11)</span><br><span class="line">    at F:\web\metronic_v4.5.2\theme\gulpfile.js:59:10</span><br><span class="line">    at taskWrapper (F:\web\metronic_v4.5.2\theme\node_modules\undertaker\lib\set-task.js:13:15)</span><br><span class="line">    at bound (domain.js:395:14)</span><br><span class="line">    at runBound (domain.js:408:12)</span><br><span class="line">    at asyncRunner (F:\web\metronic_v4.5.2\theme\node_modules\async-done\index.js:55:18)</span><br><span class="line">    at process._tickCallback (internal/process/next_tick.js:61:11)</span><br></pre></td></tr></table></figure></li></ol><ul><li>分析：<br>这个是由于require引入的包的版本问题导致的。在不同的版本里，接口参数发生了变化。在gulp4.0之后已经只能接受watch第二个参数必须为函数。<br>解决办法：修改gulpfile.js<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gulp.task(&apos;sass:watch&apos;, function () &#123;</span><br><span class="line">gulp.watch(&apos;./sass/**/*.scss&apos;,gulp.series(&apos;sass&apos;));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h1 id="RTL-SASS-编译"><a href="#RTL-SASS-编译" class="headerlink" title="RTL SASS 编译"></a>RTL SASS 编译</h1><ul><li>因为 RTL 的主题文件和默认的主题文件不在同一个目录，一个在 theme_rtl ，一个在 theme，所以，在 theme_rtl 目录下，需要对 gulp 进行重新部署。</li><li>然后进入 gulpfile.js 位于的 <em>theme_rtl</em> 目录。<br>确定最新修改的 SCSS 已通过 gulp sass 或 gulp sass:watch 命令编译。<br>运行 <em>gulp rtlcss</em> 命令执行 css 文件的 RTL 版本修改任务。<br>编译后的 RTL css 会被输出到 <em>assets</em> 目录.</li></ul><h1 id="CSS-和-JS-文件的压缩"><a href="#CSS-和-JS-文件的压缩" class="headerlink" title="CSS 和 JS 文件的压缩"></a>CSS 和 JS 文件的压缩</h1><ul><li>在命令行下进入 theme 目录。运行 <em>gulp minify</em> 执行 css 和 js 文件压缩任务.<br>压缩后的文件会输出到 <em>html</em> 目录.</li></ul><h1 id="HTML-格式化"><a href="#HTML-格式化" class="headerlink" title="HTML 格式化"></a>HTML 格式化</h1><ul><li><em>gulp prettify</em> 该命令可以将 HTML 格式化缩进，对于 pre 和 code 两个标签内的内容不进行格式化。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;使用GULP构建工具对Metronic进行管理&lt;/p&gt;
&lt;h1 id=&quot;部署gulp&quot;&gt;&lt;a href=&quot;#部署gulp&quot; class=&quot;headerlink&quot; title=&quot;部署gulp&quot;&gt;&lt;/a&gt;部署gulp&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;打开终端并进入到 Metronic
      
    
    </summary>
    
      <category term="前端学习" scheme="https://wsrdadian.github.io/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Metronic" scheme="https://wsrdadian.github.io/tags/Metronic/"/>
    
  </entry>
  
  <entry>
    <title>没有密码怎么进入系统</title>
    <link href="https://wsrdadian.github.io/2019/03/08/%E6%B2%A1%E6%9C%89%E5%AF%86%E7%A0%81%E6%80%8E%E4%B9%88%E8%BF%9B%E5%85%A5%E7%B3%BB%E7%BB%9F/"/>
    <id>https://wsrdadian.github.io/2019/03/08/没有密码怎么进入系统/</id>
    <published>2019-03-08T02:10:58.000Z</published>
    <updated>2019-03-08T02:33:14.974Z</updated>
    
    <content type="html"><![CDATA[<p>很无脑的操作，只需要一个U启</p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><ul><li>一个U盘启动器（平时用来装系统的，我的是 <a href="http://www.laoyouxitong.com" target="_blank" rel="noopener">老友</a> 老毛桃也可以）</li><li>查找电脑主机型号所对应的 <a href="http://baijiahao.baidu.com/s?id=1599537907270132743&amp;wfr=spider&amp;for=pc" target="_blank" rel="noopener">BOIS</a> 系统进入按键</li></ul><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ol><li>进入 BIOS ，选择进入 USB 系统</li><li>使用密码破解功能，选择你想破解的用户，或者直接破解管理员</li><li>关机重新启动，选择管理员登录（或者使用你修改了密码以后的用户）</li><li>登录管理员账户后进入控制面板<a href="https://jingyan.baidu.com/article/25648fc1cb6af69191fd00d9.html" target="_blank" rel="noopener">创建新的账户</a></li><li>关机，登录自己的新账户</li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>千万不要让陌生人的U盘接近自己的电脑</li><li>做一个U启随身带着以防不时之需</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;很无脑的操作，只需要一个U启&lt;/p&gt;
&lt;h1 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;一个U盘启动器（平时用来装系统的，我的是 &lt;a href=&quot;http
      
    
    </summary>
    
      <category term="系统" scheme="https://wsrdadian.github.io/categories/%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="Windows" scheme="https://wsrdadian.github.io/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>地图离线之瓦片下载-python+PIL</title>
    <link href="https://wsrdadian.github.io/2019/01/15/%E4%BD%BF%E7%94%A8python%E7%A6%BB%E7%BA%BF%E5%9C%B0%E5%9B%BE/"/>
    <id>https://wsrdadian.github.io/2019/01/15/使用python离线地图/</id>
    <published>2019-01-15T13:25:54.000Z</published>
    <updated>2019-03-08T02:31:56.691Z</updated>
    
    <content type="html"><![CDATA[<p>使用python下载瓦片</p><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ol><li><a href="https://www.python.org/downloads/" target="_blank" rel="noopener">python3.7</a> 内置pip，使用比较方便</li><li>PIL只支持到 python2.7,在3.7之后，使用 <a href="https://pypi.org/project/Pillow/" target="_blank" rel="noopener">pillow</a> 效果相同<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install Pillow</span><br></pre></td></tr></table></figure></li></ol><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><ul><li><a href="https://github.com/muxfe/BaiduMap_tiles" target="_blank" rel="noopener">github链接</a></li><li>按照md文件进行自定义操作</li></ul><h1 id="修改了一些代码"><a href="#修改了一些代码" class="headerlink" title="修改了一些代码"></a>修改了一些代码</h1><ol><li>gmap_utils.py 文件中ak值换成自己申请的</li><li><p>download_tiles.py 文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">query = &quot;qt=tile&amp;x=%d&amp;y=%d&amp;z=%d&amp;styles=%s%s&amp;udt=20190307&quot; % (x, y, zoom, styles, scaler)</span><br><span class="line">url = &quot;http://online0.map.bdimg.com/onlinelabel/?&quot; + query</span><br><span class="line">path = &quot;%d_%d_%d_r&quot; % (zoom ,x, y)</span><br><span class="line">filename = path + &quot;.png&quot;</span><br></pre></td></tr></table></figure></li><li><p>merge_tiles.py 文件</p></li></ol><ul><li><p>由于原代码中文件路径和文件名与该文件中的要求不符，所以修改filename使其符合要求</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filename = &quot;tile/%d_%d_%d_%s.%s&quot; % (zoom, x, y, TYPE, ext)</span><br></pre></td></tr></table></figure></li><li><p>生成的图片加层级标志</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result.save(&quot;map_%d_%s.%s&quot; % (zoom, TYPE, ext))</span><br></pre></td></tr></table></figure></li></ul><h1 id="仍然存在的一些问题"><a href="#仍然存在的一些问题" class="headerlink" title="仍然存在的一些问题"></a>仍然存在的一些问题</h1><ol><li>请求次数过多时，出现10060错误，目前只是重新获取，应该需要对 REQUEST 进行深入研究</li><li>级别过高时，合并图片出现内存溢出错误，初步判断为 python 内存设置问题，需继续研究</li><li>若合并时内存问题不能解决，高层级可以先获取省级，再逐个将省级合并为国家级，此时应写出新的 python 的图像合成文件</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;使用python下载瓦片&lt;/p&gt;
&lt;h1 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://www.python.org/downloads/&quot; 
      
    
    </summary>
    
      <category term="python" scheme="https://wsrdadian.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://wsrdadian.github.io/tags/python/"/>
    
      <category term="PIL" scheme="https://wsrdadian.github.io/tags/PIL/"/>
    
  </entry>
  
  <entry>
    <title>使用vue.js2.5+cube-ui仿饿了么APP-项目准备工作</title>
    <link href="https://wsrdadian.github.io/2019/01/15/%E4%BD%BF%E7%94%A8vue-js2-5-cube-ui%E4%BB%BF%E9%A5%BF%E4%BA%86%E4%B9%88APP-%E9%A1%B9%E7%9B%AE%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/"/>
    <id>https://wsrdadian.github.io/2019/01/15/使用vue-js2-5-cube-ui仿饿了么APP-项目准备工作/</id>
    <published>2019-01-15T08:31:21.000Z</published>
    <updated>2019-01-15T11:46:51.891Z</updated>
    
    <content type="html"><![CDATA[<p>进行项目准备，安装 vue、cube-ui 并测试 api 数据接口。</p><h1 id="vue-安装"><a href="#vue-安装" class="headerlink" title="vue 安装"></a><a href="https://cli.vuejs.org/zh/guide/installation.html" target="_blank" rel="noopener">vue</a> 安装</h1><ol><li><p>安装vue-cli</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br><span class="line">vue --version</span><br></pre></td></tr></table></figure></li><li><p>创建项目</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create 项目名</span><br></pre></td></tr></table></figure><p> <em>选择相应配置</em></p></li><li><p>测试项目是否能够成功运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd 项目名</span><br><span class="line">npm run serve</span><br></pre></td></tr></table></figure><p> <em>访问 <a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a></em></p></li></ol><h1 id="cube-ui安装"><a href="#cube-ui安装" class="headerlink" title="cube-ui安装"></a><a href="https://didi.github.io/cube-ui/#/zh-CN" target="_blank" rel="noopener">cube-ui</a>安装</h1><ul><li><p>cube-ui的 <a href="https://github.com/didi/cube-ui" target="_blank" rel="noopener">github地址</a></p></li><li><p>作为 <a href="https://github.com/cube-ui/vue-cli-plugin-cube-ui" target="_blank" rel="noopener">vue-cli 插件</a>使用 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue add cube-ui</span><br></pre></td></tr></table></figure><p>  <em>进行相关配置</em></p><blockquote><p>请仔细阅读 vue-cli 和 cube-ui 文档</p></blockquote></li></ul><h1 id="api接口mock"><a href="#api接口mock" class="headerlink" title="api接口mock"></a>api接口mock</h1><ol><li>根目录下添加 <em>./data.json</em><br>在<a href="https://github.com/ustbhuangyi/vue-sell" target="_blank" rel="noopener">项目源码</a>中下载文件，<a href="https://www.cnblogs.com/zhaoqingqing/p/5534827.html" target="_blank" rel="noopener">下载方法</a></li><li><p>在 <em>vue.config.js</em> 中添加代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const appData = require(&apos;./data.json&apos;)</span><br><span class="line">const seller = appData.seller</span><br><span class="line">const goods = appData.goods</span><br><span class="line">const ratings = appData.ratings</span><br></pre></td></tr></table></figure><p> <em>pluginOptions后添加</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">    before(app) &#123;</span><br><span class="line">      app.get(&apos;/api/seller&apos;,function(req,res) &#123;</span><br><span class="line">        res.json(&#123;</span><br><span class="line">          errno: 0,</span><br><span class="line">          data: seller</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">      app.get(&apos;/api/goods&apos;,function(req,res) &#123;</span><br><span class="line">        res.json(&#123;</span><br><span class="line">          errno: 0,</span><br><span class="line">          data: goods</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">      app.get(&apos;/api/ratings&apos;,function(req,res) &#123;</span><br><span class="line">        res.json(&#123;</span><br><span class="line">          errno: 0,</span><br><span class="line">          data: ratings</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p> <em>运行程序并访问 <a href="http://localhost:8080/api/seller" target="_blank" rel="noopener">http://localhost:8080/api/seller</a></em> 如果显示json内容则正确</p></li><li>为谷歌浏览器安装 <a href="https://www.cnblogs.com/whycxb/p/7126116.html" target="_blank" rel="noopener">jsonview</a> </li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;进行项目准备，安装 vue、cube-ui 并测试 api 数据接口。&lt;/p&gt;
&lt;h1 id=&quot;vue-安装&quot;&gt;&lt;a href=&quot;#vue-安装&quot; class=&quot;headerlink&quot; title=&quot;vue 安装&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://cli.vuej
      
    
    </summary>
    
      <category term="前端学习" scheme="https://wsrdadian.github.io/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="vue" scheme="https://wsrdadian.github.io/tags/vue/"/>
    
      <category term="cube-ui" scheme="https://wsrdadian.github.io/tags/cube-ui/"/>
    
  </entry>
  
  <entry>
    <title>修改配色为小埋色以及图标制作</title>
    <link href="https://wsrdadian.github.io/2019/01/14/%E4%BF%AE%E6%94%B9%E9%85%8D%E8%89%B2%E4%B8%BA%E5%B0%8F%E5%9F%8B%E8%89%B2%E4%BB%A5%E5%8F%8A%E5%9B%BE%E6%A0%87%E5%88%B6%E4%BD%9C/"/>
    <id>https://wsrdadian.github.io/2019/01/14/修改配色为小埋色以及图标制作/</id>
    <published>2019-01-14T12:46:27.000Z</published>
    <updated>2019-01-14T13:01:49.960Z</updated>
    
    <content type="html"><![CDATA[<p>修改博客配色为小埋色 , 主色是小埋斗篷颜色 , 部分部件是裤子的颜色 , 大部分文字为黑白.</p><h1 id="less文件"><a href="#less文件" class="headerlink" title="less文件"></a>less文件</h1><p><em>/themes/indigo/source/css/_partical/variable.less</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@darkPrimaryColor: #334432;  </span><br><span class="line">@primaryColor:  #f28135;     #主色(小埋色)</span><br><span class="line">@lightPrimaryColor: #fcddb7; #发色</span><br><span class="line">@textPrimaryColor: #fff;</span><br></pre></td></tr></table></figure></p><h1 id="修改头像背景"><a href="#修改头像背景" class="headerlink" title="修改头像背景"></a>修改头像背景</h1><p><em>/themes/indigo/source/img/brand.jpg</em></p><h1 id="图标制作"><a href="#图标制作" class="headerlink" title="图标制作"></a>图标制作</h1><ol><li>使用<a href="http://www.faviconico.org/" target="_blank" rel="noopener">ico在线制作工具</a>将图片转为 <em>.ico</em> 格式</li><li>将图片放入 <em>themes/indigo/source/img</em> 文件夹中，并修改 <em>themes/indigo</em> 中<em>_config.xml</em> 中 <em>favicon</em> 为 <em>/img/favicon.ico</em></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;修改博客配色为小埋色 , 主色是小埋斗篷颜色 , 部分部件是裤子的颜色 , 大部分文字为黑白.&lt;/p&gt;
&lt;h1 id=&quot;less文件&quot;&gt;&lt;a href=&quot;#less文件&quot; class=&quot;headerlink&quot; title=&quot;less文件&quot;&gt;&lt;/a&gt;less文件&lt;/h1&gt;&lt;p
      
    
    </summary>
    
      <category term="前端学习" scheme="https://wsrdadian.github.io/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="hexo" scheme="https://wsrdadian.github.io/tags/hexo/"/>
    
      <category term="blog" scheme="https://wsrdadian.github.io/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>使用hexo快速建立属于自己的blog</title>
    <link href="https://wsrdadian.github.io/2019/01/14/%E5%A6%82%E4%BD%BF%E7%94%A8hexo%E4%BD%95%C2%A6%C2%82%E4%BD%95%E4%BD%BF%E7%94%A8hexo%E5%BF%AB%E5%BB%BA%E7%AB%8Bblog%E5%BF%AB%E9%80%9F/"/>
    <id>https://wsrdadian.github.io/2019/01/14/如使用hexo何¦何使用hexo快建立blog快速/</id>
    <published>2019-01-14T11:30:25.000Z</published>
    <updated>2019-01-14T12:29:25.287Z</updated>
    
    <content type="html"><![CDATA[<p>使用HEXO快速搭建个性化BLOG</p><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ul><li>使用命令行工具 <a href="https://git-scm.com/download/linux" target="_blank" rel="noopener">Git</a> 管理和部署代码</li><li>安装 <a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node</a> 并安装 <a href="https://docs.npmjs.com/downloading-and-installing-node-js-and-npm" target="_blank" rel="noopener">npm</a></li></ul><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ol><li>注册 <a href="https://github.com/" target="_blank" rel="noopener">github</a> 账号并配置 ssh</li><li>在github上新建一个项目,注意项目名为 用户名.github.io</li><li><p>使用npm快速安装 <a href="https://hexo.io/" target="_blank" rel="noopener">hexo</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init  //初始化hexo</span><br><span class="line">cd hexo //进入项目文件</span><br><span class="line">npm install //安装依赖包</span><br></pre></td></tr></table></figure></li><li><p>安装喜欢的 <a href="https://hexo.io/themes/" target="_blank" rel="noopener">主题</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone 主题的下载地址.git</span><br><span class="line">npm install 主题插件</span><br></pre></td></tr></table></figure><p><em>此博客风格为 <a href="https://github.com/yscoder/hexo-theme-indigo/wiki" target="_blank" rel="noopener">indigo</a></em></p></li><li><p>主题安装完成后对 hexo 的根目录下的 _config.yml 进行修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">title:  博客标题</span><br><span class="line">subtitle: 副标题</span><br><span class="line">description: 网站描述</span><br><span class="line">language: 语言</span><br><span class="line">url: 站点网址(必填,否则会报错)</span><br><span class="line"></span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: ssh网址.git</span><br><span class="line">  branch: master</span><br><span class="line">&lt;!--其他视情况填写即可--&gt;</span><br></pre></td></tr></table></figure></li><li><p>对主题进行个性化配置,修改主题目录下的 _config.yml</p></li><li><p>生成网页 , 本地预览</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><p><em>本地预览网址: <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a></em></p></li><li><p>新建 blog</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;文章标题&quot;</span><br></pre></td></tr></table></figure><p><em>在 source/_posts 目录下会生成文章标题.md</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">title: 文章标题</span><br><span class="line">date: 2015-07-30 07:56:29 #发表日期，一般不改动</span><br><span class="line">categories: 文章分类</span><br><span class="line">tags: [github,hexo] 文章标签</span><br><span class="line">---</span><br><span class="line">正文，使用Markdown语法书写</span><br></pre></td></tr></table></figure></li><li><p>部署到 github 的项目上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p><em>部署成功会提示</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[info] Deploy done: git</span><br></pre></td></tr></table></figure></li><li><p>访问 <a href="https://github用户名.github.io" target="_blank" rel="noopener">https://github用户名.github.io</a> 查看自己的博客</p></li></ol><h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><ul><li>提示 <em>Cannot read property ‘replace’ of null</em> 错误 ——–&gt; <em>_config.yml</em> 中 url 未填写导致</li><li>代码部署未更新 ——–&gt; <em>hexo clean</em> 后执行 <em>hexo deploy</em> 即可</li><li>每次部署都需要输入 <em>github 用户名和密码</em> ———&gt; 检查 <em>_config.yml</em> 中配置的链接是 <em>ssh</em> 还是 <em>https</em> 链接</li><li>自定义的样式无效 ——-&gt; <em>_config.yml</em> 中设置 <em>cdn: false</em></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;使用HEXO快速搭建个性化BLOG&lt;/p&gt;
&lt;h1 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;使用命令行工具 &lt;a href=&quot;https://git-scm.com/do
      
    
    </summary>
    
      <category term="前端学习" scheme="https://wsrdadian.github.io/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="hexo" scheme="https://wsrdadian.github.io/tags/hexo/"/>
    
      <category term="blog" scheme="https://wsrdadian.github.io/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://wsrdadian.github.io/2019/01/14/hello-world/"/>
    <id>https://wsrdadian.github.io/2019/01/14/hello-world/</id>
    <published>2019-01-14T08:37:25.599Z</published>
    <updated>2019-01-14T08:37:25.599Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>

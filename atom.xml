<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>王世茹的博客</title>
  
  <subtitle>不爱撸猫的摄影师不是好程序猿</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wsrdadian.github.io/"/>
  <updated>2019-07-15T06:38:24.417Z</updated>
  <id>https://wsrdadian.github.io/</id>
  
  <author>
    <name>WSR</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>电网demo主要技术（二）</title>
    <link href="https://wsrdadian.github.io/2019/07/15/%E7%94%B5%E7%BD%91demo%E6%8A%80%E6%9C%AF%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>https://wsrdadian.github.io/2019/07/15/电网demo技术（二）/</id>
    <published>2019-07-15T03:11:26.000Z</published>
    <updated>2019-07-15T06:38:24.417Z</updated>
    
    <content type="html"><![CDATA[<h1 id="控件"><a href="#控件" class="headerlink" title="控件"></a>控件</h1><ul><li>图表控件使用 <a href="">Echarts.js</a> 制作，注意：在渲染图表之前，请确保DOM已加载（可采用定时器）</li><li>类型主要包括：折线图、饼图、仪表盘、极坐标，具体参数参考官方文档</li></ul><h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><ul><li>布局根据设计图进行position定位</li><li>表格和列表的滚动显示，导航的显示隐藏，主要使用Jquery.js</li><li>部分CSS3动画，导航栏的选中切换</li></ul><h1 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h1><ul><li>列表的滚动显示，鼠标滑入停止并能随鼠标滑动，鼠标离开，从当前位置继续滚动。</li><li>导航栏放左边，滑入显示，滑出隐藏</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;控件&quot;&gt;&lt;a href=&quot;#控件&quot; class=&quot;headerlink&quot; title=&quot;控件&quot;&gt;&lt;/a&gt;控件&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;图表控件使用 &lt;a href=&quot;&quot;&gt;Echarts.js&lt;/a&gt; 制作，注意：在渲染图表之前，请确保DOM已加载（可采用定时器）
      
    
    </summary>
    
      <category term="前端学习" scheme="https://wsrdadian.github.io/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="百度地图，Echarts" scheme="https://wsrdadian.github.io/tags/%E7%99%BE%E5%BA%A6%E5%9C%B0%E5%9B%BE%EF%BC%8CEcharts/"/>
    
  </entry>
  
  <entry>
    <title>电网demo技术（一）</title>
    <link href="https://wsrdadian.github.io/2019/07/15/%E7%94%B5%E7%BD%91demo%E6%8A%80%E6%9C%AF%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>https://wsrdadian.github.io/2019/07/15/电网demo技术（一）/</id>
    <published>2019-07-15T01:22:16.000Z</published>
    <updated>2019-07-15T05:48:50.517Z</updated>
    
    <content type="html"><![CDATA[<h1 id="接口使用"><a href="#接口使用" class="headerlink" title="接口使用"></a>接口使用</h1><ol><li>设置地图中心点（随点击标注而变化）</li><li>设置地图允许的最小/大级别</li><li>设置点的新图标（按type分类）</li><li>添加信息图标</li><li>给标注绑定事件（瓦片加载、滑动、点击）<br><em>具体技术参考 <a href="http://lbsyun.baidu.com/index.php?title=jspopular3.0" target="_blank" rel="noopener">百度地图</a> 官方API，用法已经比较详细</em></li></ol><h1 id="标注和潮流线"><a href="#标注和潮流线" class="headerlink" title="标注和潮流线"></a>标注和潮流线</h1><ol><li>标注使用自定义图标，三种类型</li><li>潮流线需要表示流向和大小，使用 <a href="https://mapv.baidu.com/" target="_blank" rel="noopener">Mapv</a> （baidu-map-forceEdgeBundling）展示，三种类型</li></ol><h2 id="DataSet"><a href="#DataSet" class="headerlink" title="DataSet"></a>DataSet</h2><p><em>和后端定义好接口</em></p><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">// var pointJson = [</span><br><span class="line">// &#123;lng: 112.19678, id: &quot;57&quot;, type: &quot;normal&quot;, lat: 30.9385, info: &quot;湖北荆门变电站&quot;&#125;,</span><br><span class="line">// &#123;lng: 118.39869, id: &quot;13&quot;, type: &quot;warning&quot;, lat: 31.35427, info: &quot;安徽芜湖站&quot;&#125;,</span><br><span class="line">// &#123;lng: 117.26289, id: &quot;14&quot;, type: &quot;danger&quot;, lat: 31.834887, info: &quot;四川锦西电厂&quot;&#125;</span><br><span class="line">// ]</span><br><span class="line">// var lineJson = [</span><br><span class="line">// &#123;</span><br><span class="line">// &quot;sourceid&quot;:&quot;0&quot;,</span><br><span class="line">// &quot;targetid&quot;:&quot;1&quot;,</span><br><span class="line">// &quot;type&quot;: &apos;normal&apos;</span><br><span class="line">// &#125;,</span><br><span class="line">// &#123;</span><br><span class="line">// &quot;sourceid&quot;:&quot;1&quot;,</span><br><span class="line">// &quot;targetid&quot;:&quot;2&quot;,</span><br><span class="line">// &quot;type&quot;: &apos;warning&apos;</span><br><span class="line">// &#125;,</span><br><span class="line">// &#123;</span><br><span class="line">// &quot;sourceid&quot;:&quot;2&quot;,</span><br><span class="line">// &quot;targetid&quot;:&quot;3&quot;,</span><br><span class="line">// &quot;type&quot;: &apos;danger&apos;</span><br><span class="line">// &#125;</span><br><span class="line">// ]</span><br></pre></td></tr></table></figure></code></pre><h2 id="标注渲染"><a href="#标注渲染" class="headerlink" title="标注渲染"></a>标注渲染</h2><p><em>三种类型标注的渲染，注意每创建一个标注，都需要给该标注绑定事件</em></p><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">function addMarkerInfo(markerInfo)&#123;</span><br><span class="line">    for(i=0;i&lt;markerInfo.length;i++)&#123;</span><br><span class="line">        if(markerInfo[i].type==&apos;normal&apos;)&#123;</span><br><span class="line">            var normalMyIcon = new BMap.Icon(&quot;../assets/img/mark/normal/green.png&quot;, new BMap.Size(37,37));</span><br><span class="line">            var normalMarker = new BMap.Marker(new BMap.Point(markerInfo[i].lng,markerInfo[i].lat),&#123;icon:normalMyIcon&#125;);  // 创建normal标注</span><br><span class="line">            map.addOverlay(normalMarker); </span><br><span class="line">            if($(&quot;#regionLevel&quot;).hasClass(&quot;active&quot;))&#123;</span><br><span class="line">                addMouseoverHandler(markerInfo[i].id,normalMarker); </span><br><span class="line">                </span><br><span class="line">            &#125;else if($(&quot;#stationLevel&quot;).hasClass(&quot;active&quot;))&#123;</span><br><span class="line">                addMouseoverHandler(markerInfo[i].id,normalMarker); </span><br><span class="line">                addClickHandler(markerInfo[i].id,normalMarker); </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;else if(markerInfo[i].type==&apos;warning&apos;)&#123;</span><br><span class="line">            var warningMyIcon = new BMap.Icon(&quot;../assets/img/mark/warning/yellow.png&quot;, new BMap.Size(37,37));</span><br><span class="line">            var warningMarker = new BMap.Marker(new BMap.Point(markerInfo[i].lng,markerInfo[i].lat),&#123;icon:warningMyIcon&#125;);  // 创建warning标注</span><br><span class="line">            map.addOverlay(warningMarker); </span><br><span class="line">            if($(&quot;#regionLevel&quot;).hasClass(&quot;active&quot;))&#123;</span><br><span class="line">                addMouseoverHandler(markerInfo[i].id,warningMarker); </span><br><span class="line">                </span><br><span class="line">            &#125;else if($(&quot;#stationLevel&quot;).hasClass(&quot;active&quot;))&#123;</span><br><span class="line">                addMouseoverHandler(markerInfo[i].id,warningMarker); </span><br><span class="line">                addClickHandler(markerInfo[i].id,warningMarker); </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;else if(markerInfo[i].type==&apos;danger&apos;)&#123;</span><br><span class="line">            var dangerMyIcon = new BMap.Icon(&quot;../assets/img/mark/danger/red.png&quot;, new BMap.Size(37,37));</span><br><span class="line">            var dangerMarker = new BMap.Marker(new BMap.Point(markerInfo[i].lng,markerInfo[i].lat),&#123;icon:dangerMyIcon&#125;);  // 创建danger标注</span><br><span class="line">            map.addOverlay(dangerMarker); </span><br><span class="line">            if($(&quot;#regionLevel&quot;).hasClass(&quot;active&quot;))&#123;</span><br><span class="line">                addMouseoverHandler(markerInfo[i].id,dangerMarker); </span><br><span class="line">                </span><br><span class="line">            &#125;else if($(&quot;#stationLevel&quot;).hasClass(&quot;active&quot;))&#123;</span><br><span class="line">                addMouseoverHandler(markerInfo[i].id,dangerMarker); </span><br><span class="line">                addClickHandler(markerInfo[i].id,dangerMarker); </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //addClickHandler(markerInfo[i].id,marker2);    </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h2 id="潮流线渲染"><a href="#潮流线渲染" class="headerlink" title="潮流线渲染"></a>潮流线渲染</h2><p><em>潮流线渲染思路：一个点图层（标注已经用百度地图标好，这里只是确定位置），三个线图层（正常、警告、危险），根据类型判断线应该放在哪个类型的集合中，分别配置不同类型的参数</em></p><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br></pre></td><td class="code"><pre><span class="line">function loadMapV(pointJson,lineJson)&#123;</span><br><span class="line">    var node_data = &#123;&#125;</span><br><span class="line">    var normal_edge_data = []</span><br><span class="line">    var warning_edge_data = []</span><br><span class="line">    var danger_edge_data = []</span><br><span class="line">    for(i in pointJson)&#123;</span><br><span class="line">        var key = pointJson[i].id  </span><br><span class="line">        node_data[key] = &#123;</span><br><span class="line">            x: parseFloat(pointJson[i].lng),</span><br><span class="line">            y: parseFloat(pointJson[i].lat),</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    for(j in lineJson)&#123;</span><br><span class="line">        if(lineJson[j].type==&apos;normal&apos;)&#123;</span><br><span class="line">            normal_edge_data.push(</span><br><span class="line">                &#123;&quot;source&quot;: lineJson[j].sourceid, &quot;target&quot;: lineJson[j].targetid&#125;</span><br><span class="line">            )</span><br><span class="line">        &#125;else if(lineJson[j].type==&apos;warning&apos;)&#123;</span><br><span class="line">            warning_edge_data.push(</span><br><span class="line">                &#123;&quot;source&quot;: lineJson[j].sourceid, &quot;target&quot;: lineJson[j].targetid&#125;</span><br><span class="line">            )</span><br><span class="line">        &#125;else if(lineJson[j].type==&apos;danger&apos;)&#123;</span><br><span class="line">            danger_edge_data.push(</span><br><span class="line">                &#123;&quot;source&quot;: lineJson[j].sourceid, &quot;target&quot;: lineJson[j].targetid&#125;</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(node_data)</span><br><span class="line">    console.log(normal_edge_data)</span><br><span class="line">    var normal_fbundling = mapv.utilForceEdgeBundling()</span><br><span class="line">                    .nodes(node_data)</span><br><span class="line">                    .edges(normal_edge_data);</span><br><span class="line">    var normal_results = normal_fbundling();  </span><br><span class="line"></span><br><span class="line">    var warning_fbundling = mapv.utilForceEdgeBundling()</span><br><span class="line">                    .nodes(node_data)</span><br><span class="line">                    .edges(warning_edge_data);</span><br><span class="line">    var warning_results = warning_fbundling(); </span><br><span class="line"></span><br><span class="line">    var danger_fbundling = mapv.utilForceEdgeBundling()</span><br><span class="line">                    .nodes(node_data)</span><br><span class="line">                    .edges(danger_edge_data);</span><br><span class="line">    var danger_results = danger_fbundling(); </span><br><span class="line"></span><br><span class="line">    var normal_data = [];</span><br><span class="line">    var normal_timeData = [];</span><br><span class="line"></span><br><span class="line">    var warning_data = [];</span><br><span class="line">    var warning_timeData = [];</span><br><span class="line"></span><br><span class="line">    var danger_data = [];</span><br><span class="line">    var danger_timeData = [];</span><br><span class="line">    </span><br><span class="line">    for (var i = 0; i &lt; normal_results.length; i++) &#123;</span><br><span class="line">        var normal_line = normal_results[i];</span><br><span class="line">        var normal_coordinates = [];</span><br><span class="line">        for (var j = 0; j &lt; normal_line.length; j++) &#123;</span><br><span class="line">            normal_coordinates.push([normal_line[j].x, normal_line[j].y]);</span><br><span class="line">            normal_timeData.push(&#123;</span><br><span class="line">                geometry: &#123;</span><br><span class="line">                    type: &apos;Point&apos;,</span><br><span class="line">                    coordinates: [normal_line[j].x, normal_line[j].y]</span><br><span class="line">                &#125;,</span><br><span class="line">                count: 1,</span><br><span class="line">                time: j</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        normal_data.push(&#123;</span><br><span class="line">            geometry: &#123;</span><br><span class="line">                type: &apos;LineString&apos;,</span><br><span class="line">                coordinates: normal_coordinates</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    for (var i = 0; i &lt; warning_results.length; i++) &#123;</span><br><span class="line">        var warning_line = warning_results[i];</span><br><span class="line">        var warning_coordinates = [];</span><br><span class="line">        for (var j = 0; j &lt; warning_line.length; j++) &#123;</span><br><span class="line">            warning_coordinates.push([warning_line[j].x, warning_line[j].y]);</span><br><span class="line">            warning_timeData.push(&#123;</span><br><span class="line">                geometry: &#123;</span><br><span class="line">                    type: &apos;Point&apos;,</span><br><span class="line">                    coordinates: [warning_line[j].x, warning_line[j].y]</span><br><span class="line">                &#125;,</span><br><span class="line">                count: 1,</span><br><span class="line">                time: j</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        warning_data.push(&#123;</span><br><span class="line">            geometry: &#123;</span><br><span class="line">                type: &apos;LineString&apos;,</span><br><span class="line">                coordinates: warning_coordinates</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    for (var i = 0; i &lt; danger_results.length; i++) &#123;</span><br><span class="line">        var danger_line = danger_results[i];</span><br><span class="line">        var danger_coordinates = [];</span><br><span class="line">        for (var j = 0; j &lt; danger_line.length; j++) &#123;</span><br><span class="line">            danger_coordinates.push([danger_line[j].x, danger_line[j].y]);</span><br><span class="line">            danger_timeData.push(&#123;</span><br><span class="line">                geometry: &#123;</span><br><span class="line">                    type: &apos;Point&apos;,</span><br><span class="line">                    coordinates: [danger_line[j].x, danger_line[j].y]</span><br><span class="line">                &#125;,</span><br><span class="line">                count: 1,</span><br><span class="line">                time: j</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        danger_data.push(&#123;</span><br><span class="line">            geometry: &#123;</span><br><span class="line">                type: &apos;LineString&apos;,</span><br><span class="line">                coordinates: danger_coordinates</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    var normal_dataSet = new mapv.DataSet(normal_data);</span><br><span class="line">    var warning_dataSet = new mapv.DataSet(warning_data);</span><br><span class="line">    var danger_dataSet = new mapv.DataSet(danger_data);</span><br><span class="line">    </span><br><span class="line">    var options = &#123;</span><br><span class="line">        strokeStyle: &apos;rgba(47, 140, 141, 0.3)&apos;,</span><br><span class="line">        draw: &apos;simple&apos;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    var mapvLayer = new mapv.baiduMapLayer(map, normal_dataSet, options);</span><br><span class="line">    var mapvLayer = new mapv.baiduMapLayer(map, warning_dataSet, options);</span><br><span class="line">    var mapvLayer = new mapv.baiduMapLayer(map, danger_dataSet, options);</span><br><span class="line">    </span><br><span class="line">    var n_dataSet = new mapv.DataSet(normal_timeData);</span><br><span class="line">    var w_dataSet = new mapv.DataSet(warning_timeData);</span><br><span class="line">    var d_dataSet = new mapv.DataSet(danger_timeData);</span><br><span class="line">    </span><br><span class="line">    var n_options = &#123;</span><br><span class="line">        fillStyle: &apos;rgba(255, 250, 250, 0.9)&apos;,</span><br><span class="line">        globalCompositeOperation: &apos;lighter&apos;,</span><br><span class="line">        size: 2,</span><br><span class="line">        animation: &#123;</span><br><span class="line">            type: &apos;time&apos;,</span><br><span class="line">            stepsRange: &#123;</span><br><span class="line">                start: 0,</span><br><span class="line">                end: 100</span><br><span class="line">            &#125;,</span><br><span class="line">            trails: 2,</span><br><span class="line">            duration: 5,</span><br><span class="line">        &#125;,</span><br><span class="line">        draw: &apos;simple&apos;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    var mapvLayer = new mapv.baiduMapLayer(map, n_dataSet, n_options);</span><br><span class="line"></span><br><span class="line">    var w_options = &#123;</span><br><span class="line">        fillStyle: &apos;rgba(167, 136, 5, 0.9)&apos;,</span><br><span class="line">        globalCompositeOperation: &apos;lighter&apos;,</span><br><span class="line">        size: 2,</span><br><span class="line">        animation: &#123;</span><br><span class="line">            type: &apos;time&apos;,</span><br><span class="line">            stepsRange: &#123;</span><br><span class="line">                start: 0,</span><br><span class="line">                end: 100</span><br><span class="line">            &#125;,</span><br><span class="line">            trails: 2,</span><br><span class="line">            duration: 4,</span><br><span class="line">        &#125;,</span><br><span class="line">        draw: &apos;simple&apos;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    var mapvLayer = new mapv.baiduMapLayer(map, w_dataSet, w_options);</span><br><span class="line"></span><br><span class="line">    var d_options = &#123;</span><br><span class="line">        fillStyle: &apos;rgba(149, 41, 17, 0.9)&apos;,</span><br><span class="line">        globalCompositeOperation: &apos;lighter&apos;,</span><br><span class="line">        size: 3,</span><br><span class="line">        animation: &#123;</span><br><span class="line">            type: &apos;time&apos;,</span><br><span class="line">            stepsRange: &#123;</span><br><span class="line">                start: 0,</span><br><span class="line">                end: 100</span><br><span class="line">            &#125;,</span><br><span class="line">            trails: 2,</span><br><span class="line">            duration: 3,</span><br><span class="line">        &#125;,</span><br><span class="line">        draw: &apos;simple&apos;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    var mapvLayer = new mapv.baiduMapLayer(map, d_dataSet, d_options);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><ul><li>多次利用百度地图的API进行事件的绑定，实现弹窗和不同级别的操作控制。在站点级别和区域级别的切换中，重新渲染点线，这种方式有待改善。</li><li>ajax轮询的方式需要改为websocket实时，减少服务器压力。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;接口使用&quot;&gt;&lt;a href=&quot;#接口使用&quot; class=&quot;headerlink&quot; title=&quot;接口使用&quot;&gt;&lt;/a&gt;接口使用&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;设置地图中心点（随点击标注而变化）&lt;/li&gt;
&lt;li&gt;设置地图允许的最小/大级别&lt;/li&gt;
&lt;li&gt;设置点的新图
      
    
    </summary>
    
      <category term="前端学习" scheme="https://wsrdadian.github.io/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="百度地图" scheme="https://wsrdadian.github.io/tags/%E7%99%BE%E5%BA%A6%E5%9C%B0%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>cytoscape.js(一)布局切换动画+两节点间多个关系展示</title>
    <link href="https://wsrdadian.github.io/2019/04/19/cytoscape-js(%E4%B8%80)%E5%B8%83%E5%B1%80%E5%88%87%E6%8D%A2%E5%8A%A8%E7%94%BB-%E4%B8%A4%E8%8A%82%E7%82%B9%E9%97%B4%E5%A4%9A%E4%B8%AA%E5%85%B3%E7%B3%BB%E5%B1%95%E7%A4%BA/"/>
    <id>https://wsrdadian.github.io/2019/04/19/cytoscape-js(一)布局切换动画-两节点间多个关系展示/</id>
    <published>2019-04-19T07:49:59.000Z</published>
    <updated>2019-04-19T08:39:06.564Z</updated>
    
    <content type="html"><![CDATA[<h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><p>仍然是关系图的展示，前面用到的vis.js在显示两个节点间多个关系时的表现有些鸡肋，同时布局切换时没有动画效果（节点逐渐移动边随之移动），这一周特尝试了<a href="http://sigmajs.org/" target="_blank" rel="noopener">sigma.js</a>，它在布局切换时的动画很吸引人，但是同样的问题，不支持两节点多个关系的展示，所以也是从入门到放弃了，下面会分别就 sigma.js 来谈谈问题</p><ol><li>两节点间同方向多个关系的展示</li><li>布局切换动画效果</li></ol><h1 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h1><h2 id="两节点间同方向多个关系的展示"><a href="#两节点间同方向多个关系的展示" class="headerlink" title="两节点间同方向多个关系的展示"></a>两节点间同方向多个关系的展示</h2><ul><li>生成曲线边的时候，发现使用的是<a href="https://baike.baidu.com/item/%E8%B4%9D%E5%A1%9E%E5%B0%94%E6%9B%B2%E7%BA%BF/1091769?fr=aladdin" target="_blank" rel="noopener">贝塞尔曲线</a>来画线，除了已知起始点坐标，我们需要知道一个控制点坐标，在 sigma.js 中，算法根据起始点坐标计算出一个控制点，所以只要坐标不变，无论几条边，控制点永远是一个，这样就导致边重合在一起<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">sigma.utils.getQuadraticControlPoint = function(x1, y1, x2, y2) &#123;</span><br><span class="line">return &#123;</span><br><span class="line">  x: (x1 + x2) / 2 + (y2 - y1) / 4,</span><br><span class="line">  y: (y1 + y2) / 2 + (x1 - x2) / 4</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">sigma.utils.getPointOnQuadraticCurve = function(t, x1, y1, x2, y2, xi, yi) &#123;</span><br><span class="line">    // http://stackoverflow.com/a/5634528</span><br><span class="line">    return &#123;</span><br><span class="line">      x: Math.pow(1 - t, 2) * x1 + 2 * (1 - t) * t * xi + Math.pow(t, 2) * x2,</span><br><span class="line">      y: Math.pow(1 - t, 2) * y1 + 2 * (1 - t) * t * yi + Math.pow(t, 2) * y2</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">sigma.utils.getPointOnBezierCurve =</span><br><span class="line">function(t, x1, y1, x2, y2, cx, cy, dx, dy) &#123;</span><br><span class="line">// http://stackoverflow.com/a/15397596</span><br><span class="line">// Blending functions:</span><br><span class="line">var B0_t = Math.pow(1 - t, 3),</span><br><span class="line">    B1_t = 3 * t * Math.pow(1 - t, 2),</span><br><span class="line">    B2_t = 3 * Math.pow(t, 2) * (1 - t),</span><br><span class="line">    B3_t = Math.pow(t, 3);</span><br><span class="line"></span><br><span class="line">return &#123;</span><br><span class="line">  x: (B0_t * x1) + (B1_t * cx) + (B2_t * dx) + (B3_t * x2),</span><br><span class="line">  y: (B0_t * y1) + (B1_t * cy) + (B2_t * dy) + (B3_t * y2)</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h2 id="布局切换动画"><a href="#布局切换动画" class="headerlink" title="布局切换动画"></a>布局切换动画</h2><ul><li>sigma.js 的切换动画真的很吸引人，我是通过 gephi 进行布局，生成节点的坐标，并生成为 json 导出，sigma.js 的动画需要将不同的坐标放在一个 json 中，使用不同的前缀区分。这样我在做的时候需要读每个布局文件然后取出节点坐标，根据id追加到对应的节点对象中，将不同布局的节点坐标存进去。个人认为，如果不需要对关系图进行很强的数据操作，只求显示效果好的话，sigma.js真的是一个不错的选择<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">for (i = 0; i &lt; N; i++) &#123;</span><br><span class="line">  o = &#123;</span><br><span class="line">    id: &apos;n&apos; + i,</span><br><span class="line">    label: &apos;Node &apos; + i,</span><br><span class="line">    circular_x: L * Math.cos(Math.PI * 2 * i / N - Math.PI / 2),</span><br><span class="line">    circular_y: L * Math.sin(Math.PI * 2 * i / N - Math.PI / 2),</span><br><span class="line">    circular_size: Math.random(),</span><br><span class="line">    circular_color: &apos;#&apos; + (</span><br><span class="line">      Math.floor(Math.random() * 16777215).toString(16) + &apos;000000&apos;</span><br><span class="line">    ).substr(0, 6),</span><br><span class="line">    grid_x: i % L,</span><br><span class="line">    grid_y: Math.floor(i / L),</span><br><span class="line">    grid_size: 1,</span><br><span class="line">    grid_color: &apos;#ccc&apos;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  [&apos;x&apos;, &apos;y&apos;, &apos;size&apos;, &apos;color&apos;].forEach(function(val) &#123;</span><br><span class="line">    o[val] = o[&apos;grid_&apos; + val];</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  g.nodes.push(o);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for (i = 0; i &lt; E; i++)</span><br><span class="line">  g.edges.push(&#123;</span><br><span class="line">    id: &apos;e&apos; + i,</span><br><span class="line">    source: &apos;n&apos; + (Math.random() * N | 0),</span><br><span class="line">    target: &apos;n&apos; + (Math.random() * N | 0)</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">// Instantiate sigma:</span><br><span class="line">s = new sigma(&#123;</span><br><span class="line">  graph: g,</span><br><span class="line">  container: &apos;graph-container&apos;,</span><br><span class="line">  settings: &#123;</span><br><span class="line">    animationsTime: 1000</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">setInterval(function() &#123;</span><br><span class="line">  var prefix = [&apos;grid_&apos;, &apos;circular_&apos;][step = +!step];</span><br><span class="line">  sigma.plugins.animate(</span><br><span class="line">    s,</span><br><span class="line">    &#123;</span><br><span class="line">      x: prefix + &apos;x&apos;,</span><br><span class="line">      y: prefix + &apos;y&apos;,</span><br><span class="line">      size: prefix + &apos;size&apos;,</span><br><span class="line">      color: prefix + &apos;color&apos;</span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line">&#125;, 2000);</span><br></pre></td></tr></table></figure></li></ul><h1 id="全能cytoscape-js"><a href="#全能cytoscape-js" class="headerlink" title="全能cytoscape.js"></a>全能<a href="http://js.cytoscape.org/" target="_blank" rel="noopener">cytoscape.js</a></h1><ul><li><p>完美支持两节点间多个关系的显示，这点是 vis.js 和 sigma.js 都没有很好的支持，光是这点就让我爱上这个库了！下面贴几行我折腾出来的代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">var cy = cytoscape(&#123;</span><br><span class="line">  container: document.getElementById(&apos;cy&apos;),</span><br><span class="line"></span><br><span class="line">  boxSelectionEnabled: false,</span><br><span class="line">  autounselectify: true,</span><br><span class="line"></span><br><span class="line">  style: cytoscape.stylesheet()</span><br><span class="line">    .selector(&apos;node&apos;)</span><br><span class="line">      .style(&#123;</span><br><span class="line">        &apos;content&apos;: &apos;data(id)&apos;</span><br><span class="line">      &#125;)</span><br><span class="line">    .selector(&apos;edge&apos;)</span><br><span class="line">      .style(&#123;</span><br><span class="line">        &apos;curve-style&apos;: &apos;bezier&apos;,</span><br><span class="line">        &apos;target-arrow-shape&apos;: &apos;triangle&apos;,</span><br><span class="line">        &apos;width&apos;: 4,</span><br><span class="line">        &apos;line-color&apos;: &apos;#ddd&apos;,</span><br><span class="line">        &apos;target-arrow-color&apos;: &apos;#ddd&apos;</span><br><span class="line">      &#125;)</span><br><span class="line">    .selector(&apos;.highlighted&apos;)</span><br><span class="line">      .style(&#123;</span><br><span class="line">        &apos;background-color&apos;: &apos;#61bffc&apos;,</span><br><span class="line">        &apos;line-color&apos;: &apos;#61bffc&apos;,</span><br><span class="line">        &apos;target-arrow-color&apos;: &apos;#61bffc&apos;,</span><br><span class="line">        &apos;transition-property&apos;: &apos;background-color, line-color, target-arrow-color&apos;,</span><br><span class="line">        &apos;transition-duration&apos;: &apos;0.5s&apos;</span><br><span class="line">      &#125;),</span><br><span class="line"></span><br><span class="line">  elements: &#123;</span><br><span class="line">      nodes: [</span><br><span class="line">        &#123; data: &#123; id: &apos;a&apos; &#125; &#125;,</span><br><span class="line">        &#123; data: &#123; id: &apos;b&apos; &#125; &#125;,</span><br><span class="line">        &#123; data: &#123; id: &apos;c&apos; &#125; &#125;,</span><br><span class="line">        &#123; data: &#123; id: &apos;d&apos; &#125; &#125;,</span><br><span class="line">        &#123; data: &#123; id: &apos;e&apos; &#125; &#125;</span><br><span class="line">      ],</span><br><span class="line"></span><br><span class="line">      edges: [</span><br><span class="line">        &#123; data: &#123; id: &apos;ae1&apos;, weight: 1, source: &apos;a&apos;, target: &apos;e&apos; &#125; &#125;,</span><br><span class="line">        &#123; data: &#123; id: &apos;ab&apos;, weight: 3, source: &apos;a&apos;, target: &apos;b&apos; &#125; &#125;,</span><br><span class="line">        &#123; data: &#123; id: &apos;be&apos;, weight: 4, source: &apos;b&apos;, target: &apos;e&apos; &#125; &#125;,</span><br><span class="line">        &#123; data: &#123; id: &apos;bc&apos;, weight: 5, source: &apos;b&apos;, target: &apos;c&apos; &#125; &#125;,</span><br><span class="line">        &#123; data: &#123; id: &apos;ce&apos;, weight: 6, source: &apos;c&apos;, target: &apos;e&apos; &#125; &#125;,</span><br><span class="line">        &#123; data: &#123; id: &apos;cd&apos;, weight: 2, source: &apos;c&apos;, target: &apos;d&apos; &#125; &#125;,</span><br><span class="line">        &#123; data: &#123; id: &apos;de&apos;, weight: 7, source: &apos;d&apos;, target: &apos;e&apos; &#125; &#125;,</span><br><span class="line">        &#123; data: &#123; id: &apos;ae2&apos;, weight: 1, source: &apos;a&apos;, target: &apos;e&apos; &#125; &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">  layout: &#123;</span><br><span class="line">    name: &apos;circle&apos;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">var id = &#123;&#125;;</span><br><span class="line">var data = fetch(&apos;data.json&apos;, &#123;mode: &apos;no-cors&apos;&#125;)</span><br><span class="line">  .then(function(res) &#123;</span><br><span class="line">    return res.json()</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(function(data) &#123;</span><br><span class="line">    data.forEach(function(e,i)&#123;</span><br><span class="line">      cy.elements().nodes().forEach(function( node )&#123; </span><br><span class="line">      if(e.data.id == node.id())&#123;</span><br><span class="line">          node.animate(&#123;</span><br><span class="line">            position: &#123; x: e.position.x, y: e.position.y &#125;</span><br><span class="line">          &#125;,&#123;</span><br><span class="line">            duration: 1000</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure></li><li><p>这是切换布局的动画，读json并获取对应id的坐标，使用动画移动到响应的位置，后面需要生成历史的话，可能我会根据sigma.js的思路来做</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">fetch(&apos;data.json&apos;, &#123;mode: &apos;no-cors&apos;&#125;)</span><br><span class="line">  .then(function(res) &#123;</span><br><span class="line">    return res.json()</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(function(data) &#123;</span><br><span class="line">    </span><br><span class="line">    console.log(data);</span><br><span class="line">    var toJson = function(res)&#123; return res.json(); &#125;;</span><br><span class="line">    var cy = window.cy = cytoscape(&#123;</span><br><span class="line">      container: document.getElementById(&apos;cy&apos;),</span><br><span class="line"></span><br><span class="line">      layout: &#123;</span><br><span class="line">        name: &apos;circle&apos;</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      style: fetch(&apos;cy-style.json&apos;).then(toJson),</span><br><span class="line"></span><br><span class="line">      elements: data</span><br><span class="line">    &#125;);</span><br><span class="line">      cy.nodes().animate(&#123;</span><br><span class="line">        style: &#123; &apos;background-color&apos;: &apos;blue&apos; &#125;</span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        duration: 1000</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> //以下为cy_style.json</span><br><span class="line"> [&#123;</span><br><span class="line">  &quot;selector&quot;: &quot;node&quot;,</span><br><span class="line">  &quot;style&quot;: &#123;</span><br><span class="line">    &quot;text-valign&quot;: &quot;center&quot;,</span><br><span class="line">    &quot;text-halign&quot;: &quot;left&quot;,</span><br><span class="line">    &quot;width&quot;: 16,</span><br><span class="line">    &quot;height&quot;: 16,</span><br><span class="line">    &quot;background-color&quot;: &quot;red&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">  &quot;selector&quot;: &quot;node[type]&quot;,</span><br><span class="line">  &quot;style&quot;: &#123;</span><br><span class="line">    &quot;label&quot;: &quot;data(type)&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">  &quot;selector&quot;: &quot;edge&quot;,</span><br><span class="line">  &quot;style&quot;: &#123;</span><br><span class="line">    &quot;width&quot;: 1,</span><br><span class="line">    &quot;curve-style&quot;: &quot;bezier&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">  &quot;selector&quot;: &quot;edge[arrow]&quot;,</span><br><span class="line">  &quot;style&quot;: &#123;</span><br><span class="line">    &quot;target-arrow-shape&quot;: &quot;data(arrow)&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">  &quot;selector&quot;: &quot;edge.hollow&quot;,</span><br><span class="line">  &quot;style&quot;: &#123;</span><br><span class="line">    &quot;target-arrow-fill&quot;: &quot;hollow&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure></li><li><p>data.json我就不贴了，按照格式自己写几条测试两节点间多条边的数据即可</p></li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>布局的动画切换这个部分其实还是手动了，如果只需要更改layout对应参数就能使点移动会更加完美，不过手动也好，学习深度会增加，有时间一定要看看如何实现的两节点间多条变不重合，看看贝塞尔的控制点是如何变的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h1&gt;&lt;p&gt;仍然是关系图的展示，前面用到的vis.js在显示两个节点间多个关系时的表现有些鸡肋，同时布局切换时没有动画效果（节点逐渐移动边随之移动），这
      
    
    </summary>
    
      <category term="前端学习" scheme="https://wsrdadian.github.io/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="cytoscape.js" scheme="https://wsrdadian.github.io/tags/cytoscape-js/"/>
    
      <category term="关系图" scheme="https://wsrdadian.github.io/tags/%E5%85%B3%E7%B3%BB%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>vis.js(三)节点操作配置</title>
    <link href="https://wsrdadian.github.io/2019/04/08/vis-js(%E4%B8%89)%E8%8A%82%E7%82%B9%E6%93%8D%E4%BD%9C%E9%85%8D%E7%BD%AE/"/>
    <id>https://wsrdadian.github.io/2019/04/08/vis-js(三)节点操作配置/</id>
    <published>2019-04-08T07:01:04.000Z</published>
    <updated>2019-04-19T07:48:10.001Z</updated>
    
    <content type="html"><![CDATA[<h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><ul><li>对canvas中的节点和边数据进行更改，包括增加新节点，修改节点的属性，删除节点的操作，通过对network的配置可以实现</li><li>上一篇中构建图标库并拖拽图标产生新节点，由于涉及到dom和canvas的转化，比较麻烦，暂时效果为：点击图标库中的图标，生成一个该实体类型的新节点</li></ul><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><ol><li><p>html代码（修改节点属性的弹出框）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;network-popUp&quot;&gt;</span><br><span class="line">  &lt;span id=&quot;operation&quot;&gt;node&lt;/span&gt; &lt;br&gt;</span><br><span class="line">  &lt;table style=&quot;margin:auto;&quot;&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">      &lt;td&gt;id&lt;/td&gt;&lt;td&gt;&lt;input id=&quot;node-id&quot; value=&quot;new value&quot; /&gt;&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">      &lt;td&gt;名称&lt;/td&gt;&lt;td&gt;&lt;input id=&quot;node-label&quot; value=&quot;new value&quot; /&gt;&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">  &lt;/table&gt;</span><br><span class="line">  &lt;input type=&quot;button&quot; value=&quot;save&quot; id=&quot;saveButton&quot; /&gt;</span><br><span class="line">  &lt;input type=&quot;button&quot; value=&quot;cancel&quot; id=&quot;cancelButton&quot; /&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></li><li><p>js中对network的配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">var options = &#123;</span><br><span class="line">manipulation: &#123;</span><br><span class="line">      addNode: function (data, callback) &#123;</span><br><span class="line">        // filling in the popup DOM elements</span><br><span class="line">        document.getElementById(&apos;operation&apos;).innerHTML = &quot;Add Node&quot;;</span><br><span class="line">        document.getElementById(&apos;node-id&apos;).value = data.id;</span><br><span class="line">        document.getElementById(&apos;node-label&apos;).value = data.label;</span><br><span class="line">        document.getElementById(&apos;saveButton&apos;).onclick = saveData.bind(this, data, callback);</span><br><span class="line">        document.getElementById(&apos;cancelButton&apos;).onclick = clearPopUp.bind();</span><br><span class="line">        document.getElementById(&apos;network-popUp&apos;).style.display = &apos;block&apos;;</span><br><span class="line">      &#125;,</span><br><span class="line">      editNode: function (data, callback) &#123;</span><br><span class="line">        // filling in the popup DOM elements</span><br><span class="line">        document.getElementById(&apos;operation&apos;).innerHTML = &quot;Edit Node&quot;;</span><br><span class="line">        document.getElementById(&apos;node-id&apos;).value = data.id;</span><br><span class="line">        document.getElementById(&apos;node-label&apos;).value = data.label;</span><br><span class="line">        document.getElementById(&apos;saveButton&apos;).onclick = saveData.bind(this, data, callback);</span><br><span class="line">        document.getElementById(&apos;cancelButton&apos;).onclick = cancelEdit.bind(this,callback);</span><br><span class="line">        document.getElementById(&apos;network-popUp&apos;).style.display = &apos;block&apos;;</span><br><span class="line">      &#125;,</span><br><span class="line">      addEdge: function (data, callback) &#123;</span><br><span class="line">        if (data.from == data.to) &#123;</span><br><span class="line">          var r = confirm(&quot;Do you want to connect the node to itself?&quot;);</span><br><span class="line">          if (r == true) &#123;</span><br><span class="line">            callback(data);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">          callback(data);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>js中新增的函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">function saveData(data,callback) &#123;</span><br><span class="line">  data.id = document.getElementById(&apos;node-id&apos;).value;</span><br><span class="line">  data.label = document.getElementById(&apos;node-label&apos;).value;</span><br><span class="line">  clearPopUp();</span><br><span class="line">  callback(data);</span><br><span class="line">&#125;</span><br><span class="line">function clearPopUp() &#123;</span><br><span class="line">  document.getElementById(&apos;saveButton&apos;).onclick = null;</span><br><span class="line">  document.getElementById(&apos;cancelButton&apos;).onclick = null;</span><br><span class="line">  document.getElementById(&apos;network-popUp&apos;).style.display = &apos;none&apos;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function cancelEdit(callback) &#123;</span><br><span class="line">  clearPopUp();</span><br><span class="line">  callback(null);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li>在canvas中出现edit按钮，点击即可对canvas中的节点和边进行修改操作</li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="http://visjs.org/docs/network/manipulation.html" target="_blank" rel="noopener">Network - manipulation</a></li><li><a href="http://visjs.org/docs/network/" target="_blank" rel="noopener">network文档</a></li><li>官方示例：vis-master\examples\network\other\manipulation.html</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;对canvas中的节点和边数据进行更改，包括增加新节点，修改节点的属性，删除节点的操作，通过对network的配置可以实现&lt;/l
      
    
    </summary>
    
      <category term="前端学习" scheme="https://wsrdadian.github.io/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="关系图" scheme="https://wsrdadian.github.io/tags/%E5%85%B3%E7%B3%BB%E5%9B%BE/"/>
    
      <category term="vis.js" scheme="https://wsrdadian.github.io/tags/vis-js/"/>
    
  </entry>
  
  <entry>
    <title>vis.js(二)节点及边的个性化配置</title>
    <link href="https://wsrdadian.github.io/2019/04/02/vis.js(%E4%BA%8C)%E8%8A%82%E7%82%B9%E5%8F%8A%E8%BE%B9%E7%9A%84%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE/"/>
    <id>https://wsrdadian.github.io/2019/04/02/vis.js(二)节点及边的个性化配置/</id>
    <published>2019-04-02T02:41:22.000Z</published>
    <updated>2019-04-02T03:02:29.635Z</updated>
    
    <content type="html"><![CDATA[<h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><p>设计节点的实体及关系样式，如果在json中设置，会发现出现大量的重复的数据，所以把每个实体类型单独拿出来作为组(group)</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">var options = &#123;</span><br><span class="line">    nodes: &#123;</span><br><span class="line">      shape: &apos;dot&apos;,</span><br><span class="line">      font: &#123;</span><br><span class="line">        face: &apos;Tahoma&apos;</span><br><span class="line">      &#125;,</span><br><span class="line">      borderWidth:1.5,</span><br><span class="line">      scaling:&#123;</span><br><span class="line">        label: &#123;</span><br><span class="line">          min: 1,</span><br><span class="line">          max: 5</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      font: &#123;size:12, color:&apos;#626568&apos;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    edges: &#123;</span><br><span class="line">      width: 0.2,</span><br><span class="line">      smooth: &#123;</span><br><span class="line">        type: &apos;continuous&apos;</span><br><span class="line">      &#125;,</span><br><span class="line">      arrows: &quot;to&quot;,</span><br><span class="line">    &#125;,</span><br><span class="line">    groups: &#123;</span><br><span class="line">      Person: &#123;</span><br><span class="line">        shape: &quot;circularImage&quot;,</span><br><span class="line">        image: &quot;./images/Person.png&quot;,</span><br><span class="line">        color: &#123;</span><br><span class="line">          background: &quot;#fff&quot;,</span><br><span class="line">          border: &quot;#022240&quot;, </span><br><span class="line">          highlight: &#123;</span><br><span class="line">            &quot;border&quot;: &quot;#d70007&quot;,</span><br><span class="line">            &quot;background&quot;: &quot;#fec40a&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      Woman: &#123;</span><br><span class="line">        shape: &quot;circularImage&quot;,</span><br><span class="line">        image: &quot;./images/Woman.png&quot;,</span><br><span class="line">        color: &#123;</span><br><span class="line">          background: &quot;#fff&quot;,</span><br><span class="line">          border: &quot;#022240&quot;, </span><br><span class="line">          highlight: &#123;</span><br><span class="line">            &quot;border&quot;: &quot;#d70007&quot;,</span><br><span class="line">            &quot;background&quot;: &quot;#fec40a&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      Insurgent: &#123;</span><br><span class="line">        shape: &quot;circularImage&quot;,</span><br><span class="line">        image: &quot;./images/Insurgent.png&quot;,</span><br><span class="line">        color: &#123;</span><br><span class="line">          background: &quot;#fff&quot;,</span><br><span class="line">          border: &quot;#022240&quot;, </span><br><span class="line">          highlight: &#123;</span><br><span class="line">            &quot;border&quot;: &quot;#d70007&quot;,</span><br><span class="line">            &quot;background&quot;: &quot;#fec40a&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    interaction: &#123;</span><br><span class="line">    &#125;,</span><br><span class="line">    physics: false</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure></code></pre><h1 id="下一个任务"><a href="#下一个任务" class="headerlink" title="下一个任务"></a>下一个任务</h1><p>制作图标库并实现拖拽图标添加新节点并为节点添加label和边</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h1&gt;&lt;p&gt;设计节点的实体及关系样式，如果在json中设置，会发现出现大量的重复的数据，所以把每个实体类型单独拿出来作为组(group)&lt;/p&gt;
&lt;h1
      
    
    </summary>
    
      <category term="前端学习" scheme="https://wsrdadian.github.io/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="关系图" scheme="https://wsrdadian.github.io/tags/%E5%85%B3%E7%B3%BB%E5%9B%BE/"/>
    
      <category term="vis.js" scheme="https://wsrdadian.github.io/tags/vis-js/"/>
    
  </entry>
  
  <entry>
    <title>vis.js(一)节点及边的操作</title>
    <link href="https://wsrdadian.github.io/2019/03/30/vis.js(%E4%B8%80)%E8%8A%82%E7%82%B9%E5%8F%8A%E8%BE%B9%E7%9A%84%E6%93%8D%E4%BD%9C/"/>
    <id>https://wsrdadian.github.io/2019/03/30/vis.js(一)节点及边的操作/</id>
    <published>2019-03-30T02:49:01.000Z</published>
    <updated>2019-04-02T02:58:21.509Z</updated>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><h2 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h2><p><a href="http://visjs.org" target="_blank" rel="noopener">vis.js</a> 是基于浏览器的动态可视化库。该库旨在易于使用，处理大量动态数据，以及实现对数据的操作和交互。该库由组件DataSet，Timeline，Network，Graph2d和Graph3d组成。我这里做关系图，所以目前主要针对 Network 进行学习。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol><li>使用 npm 安装 </li><li>github 直接 clone 或者 下载包</li></ol><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p>我是通过 github 下载包获取代码，不过目录结构应该类似，下面介绍一下 Network 的主要学习的部分。进入 \vis-master\examples\network 目录</p><h3 id="data目录"><a href="#data目录" class="headerlink" title="data目录"></a>data目录</h3><h4 id="datasets-html"><a href="#datasets-html" class="headerlink" title="datasets.html"></a>datasets.html</h4><ol><li><p>渲染一个基本的 network</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">function startNetwork() &#123;</span><br><span class="line">    // this list is kept to remove a random node.. we do not add node 1 here because it&apos;s used for changes</span><br><span class="line">    nodeIds = [2, 3, 4, 5];</span><br><span class="line">    shadowState = false;</span><br><span class="line">    // create an array with nodes 每个节点有一个唯一的 id ，label 为节点的标签</span><br><span class="line">    nodesArray = [</span><br><span class="line">        &#123;id: 1, label: &apos;Node 1&apos;&#125;,</span><br><span class="line">        &#123;id: 2, label: &apos;Node 2&apos;&#125;,</span><br><span class="line">        &#123;id: 3, label: &apos;Node 3&apos;&#125;,</span><br><span class="line">        &#123;id: 4, label: &apos;Node 4&apos;&#125;,</span><br><span class="line">        &#123;id: 5, label: &apos;Node 5&apos;&#125;</span><br><span class="line">    ];</span><br><span class="line">    //使用 DataSet 函数将节点和边转化为 vis 节点和边对象</span><br><span class="line">    nodes = new vis.DataSet(nodesArray);</span><br><span class="line">    // create an array with edges 每条边有入度和出度，调用节点 id</span><br><span class="line">    edgesArray = [</span><br><span class="line">        &#123;from: 1, to: 3&#125;,</span><br><span class="line">        &#123;from: 1, to: 2&#125;,</span><br><span class="line">        &#123;from: 2, to: 4&#125;,</span><br><span class="line">        &#123;from: 2, to: 5&#125;</span><br><span class="line">    ];</span><br><span class="line">    edges = new vis.DataSet(edgesArray);</span><br><span class="line">    // create a network 渲染 network 需要 Dom 中有一个 id 为 mynetwork 的 div 作为容器</span><br><span class="line">    var container = document.getElementById(&apos;mynetwork&apos;);</span><br><span class="line">    //设置渲染数据和参数，用 Network 函数生成即可。可以通过设置 options 来生成自定义 network </span><br><span class="line">    var data = &#123;</span><br><span class="line">        nodes: nodes,</span><br><span class="line">        edges: edges</span><br><span class="line">    &#125;;</span><br><span class="line">    var options = &#123;&#125;;</span><br><span class="line">    network = new vis.Network(container, data, options);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>添加一个随机生成的节点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function addNode() &#123;</span><br><span class="line">//random() 方法可返回介于 0 ~ 1 之间的一个随机数，1e7表示10000000</span><br><span class="line">//Number.toString()：将数字转换为字符串。用它的参数指定的基数或底数（底数范围为2-36）。如果省略参数，则使用基数10。当参数值为2时，返回二进制数。，并返回结果</span><br><span class="line">    var newId = (Math.random() * 1e7).toString(32); </span><br><span class="line">    nodes.add(&#123;id:newId, label:&quot;I&apos;m new!&quot;&#125;);</span><br><span class="line">    nodeIds.push(newId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>参考博客： <a href="https://www.jianshu.com/p/0ae00f6b83ac" target="_blank" rel="noopener">一些有用的JS 代码片段</a></p><ol start="3"><li><p>改变指定节点的属性并更新</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function changeNode1() &#123;</span><br><span class="line">//Math.floor()返回小于或等于一个给定数字的最大整数</span><br><span class="line">    var newColor = &apos;#&apos; + Math.floor((Math.random() * 255 * 255 * 255)).toString(16);</span><br><span class="line">    //更新指定id的节点属性，传入 id 和更改的节点属性</span><br><span class="line">    nodes.update([&#123;id:1, color:&#123;background:newColor&#125;&#125;]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>移除指定节点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function removeRandomNode() &#123;</span><br><span class="line">    var randomNodeId = nodeIds[Math.floor(Math.random() * nodeIds.length)];</span><br><span class="line">    //移除指定id节点</span><br><span class="line">    nodes.remove(&#123;id:randomNodeId&#125;);</span><br><span class="line">    //indexOf() 方法可返回某个指定的字符串值在字符串和数组中首次出现的位置。</span><br><span class="line">    var index = nodeIds.indexOf(randomNodeId);</span><br><span class="line">    //splice() 方法向/从数组中添加/删除项目，然后返回被删除的项目。index规定添加/删除项目的位置，1是要删除的项目数量</span><br><span class="line">    nodeIds.splice(index,1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 移除节点分两步，先移除指定id节点，然后在节点id数组中移除该id值</p></li><li><p>修改全局节点属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function changeOptions() &#123;</span><br><span class="line">    shadowState = !shadowState;</span><br><span class="line">    network.setOptions(&#123;nodes:&#123;shadow:shadowState&#125;,edges:&#123;shadow:shadowState&#125;&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>重新加载为初始状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function resetAllNodes() &#123;</span><br><span class="line">    nodes.clear();</span><br><span class="line">    edges.clear();</span><br><span class="line">    nodes.add(nodesArray);</span><br><span class="line">    edges.add(edgesArray);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>重新加载为稳定的初始状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function resetAllNodesStabilize() &#123;</span><br><span class="line">    resetAllNodes();</span><br><span class="line">    network.stabilize();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>设为稳定状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function setTheData() &#123;</span><br><span class="line">    nodes = new vis.DataSet(nodesArray);</span><br><span class="line">    edges = new vis.DataSet(edgesArray);</span><br><span class="line">    network.setData(&#123;nodes:nodes, edges:edges&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>销毁dom并重新渲染</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function resetAll() &#123;</span><br><span class="line">    if (network !== null) &#123;</span><br><span class="line">        network.destroy();</span><br><span class="line">        network = null;</span><br><span class="line">    &#125;</span><br><span class="line">    startNetwork();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="dynamicData-html"><a href="#dynamicData-html" class="headerlink" title="dynamicData.html"></a>dynamicData.html</h4><ol><li><p>添加节点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function addNode() &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        nodes.add(&#123;</span><br><span class="line">            id: document.getElementById(&apos;node-id&apos;).value,</span><br><span class="line">            label: document.getElementById(&apos;node-label&apos;).value</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    catch (err) &#123;</span><br><span class="line">        alert(err);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>更新:保存修改后的节点信息（如果不存在id则添加，已存在id则修改）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function updateNode() &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        nodes.update(&#123;</span><br><span class="line">            id: document.getElementById(&apos;node-id&apos;).value,</span><br><span class="line">            label: document.getElementById(&apos;node-label&apos;).value</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    catch (err) &#123;</span><br><span class="line">        alert(err);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li>添加和更新边和节点类似</li></ul><ol start="3"><li><p>移除</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function removeNode() &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        nodes.remove(&#123;id: document.getElementById(&apos;node-id&apos;).value&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    catch (err) &#123;</span><br><span class="line">        alert(err);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>渲染</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">function draw() &#123;</span><br><span class="line">    // create an array with nodes</span><br><span class="line">    nodes = new vis.DataSet();</span><br><span class="line">    nodes.on(&apos;*&apos;, function () &#123;</span><br><span class="line">    //JSON.stringify() 方法将 JavaScript 对象转换为字符串</span><br><span class="line">        document.getElementById(&apos;nodes&apos;).innerHTML = JSON.stringify(nodes.get(), null, 4);</span><br><span class="line">    &#125;);</span><br><span class="line">    nodes.add([</span><br><span class="line">        &#123;id: &apos;1&apos;, label: &apos;Node 1&apos;&#125;,</span><br><span class="line">        &#123;id: &apos;2&apos;, label: &apos;Node 2&apos;&#125;,</span><br><span class="line">        &#123;id: &apos;3&apos;, label: &apos;Node 3&apos;&#125;,</span><br><span class="line">        &#123;id: &apos;4&apos;, label: &apos;Node 4&apos;&#125;,</span><br><span class="line">        &#123;id: &apos;5&apos;, label: &apos;Node 5&apos;&#125;</span><br><span class="line">    ]);</span><br><span class="line"></span><br><span class="line">    // create an array with edges</span><br><span class="line">    edges = new vis.DataSet();</span><br><span class="line">    edges.on(&apos;*&apos;, function () &#123;</span><br><span class="line">        document.getElementById(&apos;edges&apos;).innerHTML = JSON.stringify(edges.get(), null, 4);</span><br><span class="line">    &#125;);</span><br><span class="line">    edges.add([</span><br><span class="line">        &#123;id: &apos;1&apos;, from: &apos;1&apos;, to: &apos;2&apos;&#125;,</span><br><span class="line">        &#123;id: &apos;2&apos;, from: &apos;1&apos;, to: &apos;3&apos;&#125;,</span><br><span class="line">        &#123;id: &apos;3&apos;, from: &apos;2&apos;, to: &apos;4&apos;&#125;,</span><br><span class="line">        &#123;id: &apos;4&apos;, from: &apos;2&apos;, to: &apos;5&apos;&#125;</span><br><span class="line">    ]);</span><br><span class="line"></span><br><span class="line">    // create a network</span><br><span class="line">    var container = document.getElementById(&apos;network&apos;);</span><br><span class="line">    var data = &#123;</span><br><span class="line">        nodes: nodes,</span><br><span class="line">        edges: edges</span><br><span class="line">    &#125;;</span><br><span class="line">    var options = &#123;&#125;;</span><br><span class="line">    network = new vis.Network(container, data, options);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>参考<a href="http://www.runoob.com/json/json-stringify.html" target="_blank" rel="noopener">JSON.stringify()</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h1&gt;&lt;h2 id=&quot;用途&quot;&gt;&lt;a href=&quot;#用途&quot; class=&quot;headerlink&quot; title=&quot;用途&quot;&gt;&lt;/a&gt;用途&lt;/h2&gt;&lt;p&gt;&lt;a 
      
    
    </summary>
    
      <category term="前端学习" scheme="https://wsrdadian.github.io/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="关系图" scheme="https://wsrdadian.github.io/tags/%E5%85%B3%E7%B3%BB%E5%9B%BE/"/>
    
      <category term="vis.js" scheme="https://wsrdadian.github.io/tags/vis-js/"/>
    
  </entry>
  
  <entry>
    <title>json接口的问题以及解决方法</title>
    <link href="https://wsrdadian.github.io/2019/03/22/json%E6%8E%A5%E5%8F%A3%E7%9A%84%E9%97%AE%E9%A2%98%E4%BB%A5%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>https://wsrdadian.github.io/2019/03/22/json接口的问题以及解决方法/</id>
    <published>2019-03-22T05:49:14.000Z</published>
    <updated>2019-03-25T05:53:41.575Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>接上一篇《定义json数据接口》，根据新的需求，现有的代码已经不能满足，所以要把部分代码推倒重写，依然是json的问题：在上一篇中，url获取之后，先进行 &amp; 切割，再进行 = 切割,由于对 = 进行切割，所以当我们想往信息窗口的 info 中添加 html 时，如果其中带有 = ，会导致被切割，字符串被打断。由此提出两个解决办法：</p><ul><li>指定切割第一次出现的 =</li><li>定义正则匹配函数</li><li>参数中有 html 携带的 . 和 / 等特殊符号导致字符串转对象时报错</li></ul><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><ul><li><p>获取 url 参数，这里将 url 和想获取的数据名 key 传入到正则匹配函数 getQueryString 中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function getUrl()&#123;</span><br><span class="line">    var url = decodeURI(window.location.search.substring(1));</span><br><span class="line">    getQueryString(url,&apos;data&apos;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>正则匹配传入的名字和url，根据名字从 url 中匹配 val 值，如果匹配成功，则将字符串转为 json 对象，对格式进行判断，如果正确则进行参数匹配。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">function getQueryString(url,name) &#123;  </span><br><span class="line">    var reg = new RegExp(&quot;(^|&amp;)&quot; + name + &quot;=([^&amp;]*)(&amp;|$)&quot;);  //开始位置或者&amp;符+名+[个数不限]+&amp;符或者结束位置</span><br><span class="line">    console.log(reg);</span><br><span class="line">    var r = url.match(reg);  </span><br><span class="line">    if (r != null) &#123;  </span><br><span class="line">        try&#123;</span><br><span class="line">            data = $.parseJSON(r[2]);</span><br><span class="line">            matchQuery(data);</span><br><span class="line">        &#125;catch(err)&#123;</span><br><span class="line">            alert(&quot;参数格式有误！&quot;);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;  </span><br><span class="line">    return null;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>得到 json 对象后，对其进行遍历，逐层遍历出想要的点对象，将对象传入封装好的函数中即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">function matchQuery(data)&#123;</span><br><span class="line">    $.each(data, function (key, val) &#123;</span><br><span class="line">        $.each(data[key], function (k, v) &#123;</span><br><span class="line">            if(k == &apos;markerInfo&apos;)&#123;</span><br><span class="line">                addMarkerInfo(v);</span><br><span class="line">            &#125;</span><br><span class="line">            if(k == &apos;heatPoints&apos;)&#123;</span><br><span class="line">                addHeat(v);</span><br><span class="line">            &#125;</span><br><span class="line">            if(k == &apos;linePoints&apos;)&#123;</span><br><span class="line">                addLine(v);</span><br><span class="line">                addMarkerInfo(v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>解决 html 报错：将 data = $.parseJSON(data); 改为 eval(“(“+data+”)”)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var dataObj=eval(&quot;(&quot;+data+&quot;)&quot;);//转换为json对象</span><br></pre></td></tr></table></figure></li><li><p>参考博客<a href="https://www.cnblogs.com/fogwang/p/3213668.html" target="_blank" rel="noopener">jQuery中json中关于带有html代码网页的处理</a></p></li></ul><h1 id="小总结"><a href="#小总结" class="headerlink" title="小总结"></a>小总结</h1><p>使用正则匹配很方便，虽然看起来像乱码，但是还是很实用的，需要学习。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h1&gt;&lt;p&gt;接上一篇《定义json数据接口》，根据新的需求，现有的代码已经不能满足，所以要把部分代码推倒重写，依然是json的问题：在上一篇中，url获
      
    
    </summary>
    
      <category term="前端学习" scheme="https://wsrdadian.github.io/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="百度地图" scheme="https://wsrdadian.github.io/tags/%E7%99%BE%E5%BA%A6%E5%9C%B0%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>定义json数据接口</title>
    <link href="https://wsrdadian.github.io/2019/03/21/%E5%AE%9A%E4%B9%89json%E6%95%B0%E6%8D%AE%E6%8E%A5%E5%8F%A3/"/>
    <id>https://wsrdadian.github.io/2019/03/21/定义json数据接口/</id>
    <published>2019-03-21T07:38:07.000Z</published>
    <updated>2019-03-21T08:49:20.898Z</updated>
    
    <content type="html"><![CDATA[<h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><ol><li>绘制两点间带箭头的线段，起点终点使用标注标记并点击标注弹出信息窗口。</li><li>绘制热力图，根据点坐标及权重（权重越大，点显示越显著）。</li><li>添加点击出现弹出框的标注点。</li></ol><h1 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h1><ul><li><p>根据函数需要，设计需要传入的参数数据，用json格式写出。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url?markerInfo=[&#123;&quot;lng&quot;:&quot;116.417854&quot;,&quot;lat&quot;:&quot;39.921988&quot;,&quot;info&quot;:&quot;地址：北京市东城区王府井大街88号乐天银泰百货八层&quot;&#125;,&#123;&quot;lng&quot;:&quot;116.406605&quot;,&quot;lat&quot;:&quot;39.921585&quot;,&quot;info&quot;:&quot;地址：北京市东城区东华门大街&quot;&#125;,&#123;&quot;lng&quot;:&quot;116.412222&quot;,&quot;lat&quot;:&quot;39.912345&quot;,&quot;info&quot;:&quot;地址：北京市东城区正义路甲5号&lt;a href:&apos;../baidu.com&apos;&gt;&lt;/a&gt;&quot;&#125;]&amp;linePoints=[&#123;&quot;lng&quot;:&quot;116.399&quot;,&quot;lat&quot;:&quot;39.930&quot;&#125;,&#123;&quot;lng&quot;:&quot;116.505&quot;,&quot;lat&quot;:&quot;39.950&quot;&#125;]&amp;heatPoints=[&#123;&quot;lng&quot;:&quot;116.405&quot;,&quot;lat&quot;:&quot;39.910&quot;,&quot;count&quot;:&quot;50&quot;&#125;,&#123;&quot;lng&quot;:&quot;116.399&quot;,&quot;lat&quot;:&quot;39.920&quot;,&quot;count&quot;:&quot;51&quot;&#125;]</span><br></pre></td></tr></table></figure></li><li><p>便于查看，json格式化之后如下（中间脑补 &amp; 符）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">markerInfo=[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;lng&quot;: &quot;116.417854&quot;,</span><br><span class="line">        &quot;lat&quot;: &quot;39.921988&quot;,</span><br><span class="line">        &quot;info&quot;: &quot;地址：北京市东城区王府井大街88号乐天银泰百货八层&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;lng&quot;: &quot;116.406605&quot;,</span><br><span class="line">        &quot;lat&quot;: &quot;39.921585&quot;,</span><br><span class="line">        &quot;info&quot;: &quot;地址：北京市东城区东华门大街&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;lng&quot;: &quot;116.412222&quot;,</span><br><span class="line">        &quot;lat&quot;: &quot;39.912345&quot;,</span><br><span class="line">        &quot;info&quot;: &quot;地址：北京市东城区正义路甲5号&lt;a href:&apos;../baidu.com&apos;&gt;&lt;/a&gt;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line">linePoints=[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;lng&quot;: &quot;116.399&quot;,</span><br><span class="line">        &quot;lat&quot;: &quot;39.930&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;lng&quot;: &quot;116.505&quot;,</span><br><span class="line">        &quot;lat&quot;: &quot;39.950&quot;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line">heatPoints=[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;lng&quot;: &quot;116.405&quot;,</span><br><span class="line">        &quot;lat&quot;: &quot;39.910&quot;,</span><br><span class="line">        &quot;count&quot;: &quot;50&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;lng&quot;: &quot;116.399&quot;,</span><br><span class="line">        &quot;lat&quot;: &quot;39.920&quot;,</span><br><span class="line">        &quot;count&quot;: &quot;51&quot;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ul><h1 id="绘制"><a href="#绘制" class="headerlink" title="绘制"></a>绘制</h1><ol><li><p>获取参数，进行字转义，然后根据 &amp; 进行切割，取到对应的 k=v 对象，然后进行遍历，如果存在相应的 k ，则检查 v 是否符合 json 格式，如果不符合 json 格式，弹出提示框；如果符合，调用对应的创建函数。要保证代码的健壮性，这里对url的格式错误进行提示，同时避免其他参数传入影响接收，在切割字符串时应避免设置固定的数值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">function getQueryVariable()&#123;</span><br><span class="line">    var query = decodeURI(window.location.search.substring(1));</span><br><span class="line">    console.log(query);</span><br><span class="line">    if (query.indexOf(&quot;?&quot;)) &#123; </span><br><span class="line">        query = query.replace(/%22/g,&apos;&quot;&apos;).replace(/%27/g,&apos;&quot;&apos;).replace(/%20/g,&apos; &apos;);</span><br><span class="line">        //.replace(/%5C/g,&apos;\\&apos;).replace(/%3A/g,&apos;:&apos;).replace(/%3B/g,&apos;;&apos;);</span><br><span class="line">        strs = query.split(&quot;&amp;&quot;);</span><br><span class="line">        for(var i = 0; i &lt; strs.length; i ++) &#123; </span><br><span class="line">            var key = strs[i].split(&quot;=&quot;)[0];</span><br><span class="line">            var val =  unescape(strs[i].split(&quot;=&quot;)[1]); </span><br><span class="line">                if(key == &apos;heatPoints&apos;) &#123;</span><br><span class="line">                    try&#123;</span><br><span class="line">                        heatPoints = $.parseJSON(val);</span><br><span class="line">                    &#125;catch(err)&#123;</span><br><span class="line">                        alert(&apos;heatPoints参数格式不正确&apos;);</span><br><span class="line">                        break;</span><br><span class="line">                    &#125;</span><br><span class="line">                    addHeat(heatPoints);</span><br><span class="line">                &#125; </span><br><span class="line">                if(key == &apos;markerInfo&apos;) &#123;</span><br><span class="line">                    try&#123;</span><br><span class="line">                        markerInfo = $.parseJSON(val);</span><br><span class="line">                    &#125;catch(err)&#123;</span><br><span class="line">                        alert(&apos;markerInfo参数格式不正确&apos;);</span><br><span class="line">                        break;</span><br><span class="line">                    &#125;</span><br><span class="line">                    addMarkerInfo(markerInfo);</span><br><span class="line">                &#125; </span><br><span class="line">                if(key == &apos;linePoints&apos;) &#123;</span><br><span class="line">                    try&#123;</span><br><span class="line">                        linePoints = $.parseJSON(val);</span><br><span class="line">                    &#125;catch(err)&#123;</span><br><span class="line">                        alert(&apos;linePoints参数格式不正确&apos;);</span><br><span class="line">                        break;</span><br><span class="line">                    &#125;</span><br><span class="line">                    addLine(linePoints);</span><br><span class="line">                    addMarkerInfo(linePoints);</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>绘制两点间的线段，仅需要起点和终点的经纬度即可，创建一条折线，并绘制箭头。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function addLine(linePoints)&#123;</span><br><span class="line">    var points = [];</span><br><span class="line">    var lineList = new Array();//记录要绘制的线</span><br><span class="line">    var arrowLineList = new Array();//记录绘制的箭头线</span><br><span class="line">    var isFirstLoad = false;//是否是第一次加载，第一次加载不触发清除事件</span><br><span class="line">    var arrowLineLengthRate = 12 / 1;//15是初始时设置的地图显示范围，10是初始时设置的箭头的长度，当地图放大缩小时保证箭头线长度一致</span><br></pre></td></tr></table></figure></li></ol><ul><li><p>遍历获取经纬度，并创建为一个坐标点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">for( i = 0; i &lt; linePoints.length; i++ )&#123;</span><br><span class="line">    var point = linePoints[i]; </span><br><span class="line">    var lng = point.lng;</span><br><span class="line">    var lat = point.lat;</span><br><span class="line">    points[i] = new BMap.Point(lng, lat);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>对折线进行样式设置，设置完成之后，传入点数组，创建折线</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">    var polyline = new BMap.Polyline( </span><br><span class="line">        points , </span><br><span class="line">        &#123;</span><br><span class="line">            strokeWeight:&apos;3&apos;,//折线的宽度，以像素为单位</span><br><span class="line">            strokeOpacity: 0.5,//折线的透明度，取值范围0 - 1</span><br><span class="line">            strokeColor:&quot;blue&quot; //折线颜色</span><br><span class="line">        &#125;);                         //创建折线</span><br><span class="line">    map.addOverlay(polyline);       //增加折线</span><br><span class="line">    lineList[lineList.length] = polyline;//记录要绘制的线</span><br><span class="line">    arrowLineList[arrowLineList.length] = addArrow(polyline,15,Math.PI/7);//记录绘制的箭头线</span><br><span class="line">    isFitstLoad = true;//第一次加载</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>绘制箭头，箭头的算法有些复杂，自行消化。参考博客：<a href="https://www.cnblogs.com/smallrock/p/4499304.html" target="_blank" rel="noopener">百度地图API绘制带头箭头的折线</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">function addArrow(polyline,length,angleValue)&#123; //绘制箭头的函数</span><br><span class="line">        var linePoint=polyline.getPath();//线的坐标串</span><br><span class="line">        var arrowCount=linePoint.length;</span><br><span class="line">        for(var i =1;i&lt;arrowCount;i++)&#123; //在拐点处绘制箭头</span><br><span class="line">            var pixelStart=map.pointToPixel(linePoint[i-1]);</span><br><span class="line">            var pixelEnd=map.pointToPixel(linePoint[i]);</span><br><span class="line">            var angle=angleValue;//箭头和主线的夹角</span><br><span class="line">            var r=length; // r/Math.sin(angle)代表箭头长度</span><br><span class="line">            var delta=0; //主线斜率，垂直时无斜率</span><br><span class="line">            var param=0; //代码简洁考虑</span><br><span class="line">            var pixelTemX,pixelTemY;//临时点坐标</span><br><span class="line">            var pixelX,pixelY,pixelX1,pixelY1;//箭头两个点</span><br><span class="line">            if(pixelEnd.x-pixelStart.x==0)&#123; //斜率不存在是时</span><br><span class="line">                pixelTemX=pixelEnd.x;</span><br><span class="line">                if(pixelEnd.y&gt;pixelStart.y)</span><br><span class="line">                &#123;</span><br><span class="line">                pixelTemY=pixelEnd.y-r;</span><br><span class="line">                &#125;</span><br><span class="line">                else</span><br><span class="line">                &#123;</span><br><span class="line">                pixelTemY=pixelEnd.y+r;</span><br><span class="line">                &#125;    </span><br><span class="line">                //已知直角三角形两个点坐标及其中一个角，求另外一个点坐标算法</span><br><span class="line">                pixelX=pixelTemX-r*Math.tan(angle); </span><br><span class="line">                pixelX1=pixelTemX+r*Math.tan(angle);</span><br><span class="line">                pixelY=pixelY1=pixelTemY;</span><br><span class="line">            &#125;</span><br><span class="line">            else  //斜率存在时</span><br><span class="line">            &#123;</span><br><span class="line">                delta=(pixelEnd.y-pixelStart.y)/(pixelEnd.x-pixelStart.x);</span><br><span class="line">                param=Math.sqrt(delta*delta+1);</span><br><span class="line"></span><br><span class="line">                if((pixelEnd.x-pixelStart.x)&lt;0) //第二、三象限</span><br><span class="line">                &#123;</span><br><span class="line">                pixelTemX=pixelEnd.x+ r/param;</span><br><span class="line">                pixelTemY=pixelEnd.y+delta*r/param;</span><br><span class="line">                &#125;</span><br><span class="line">                else//第一、四象限</span><br><span class="line">                &#123;</span><br><span class="line">                pixelTemX=pixelEnd.x- r/param;</span><br><span class="line">                pixelTemY=pixelEnd.y-delta*r/param;</span><br><span class="line">                &#125;</span><br><span class="line">                //已知直角三角形两个点坐标及其中一个角，求另外一个点坐标算法</span><br><span class="line">                pixelX=pixelTemX+ Math.tan(angle)*r*delta/param;</span><br><span class="line">                pixelY=pixelTemY-Math.tan(angle)*r/param;</span><br><span class="line"></span><br><span class="line">                pixelX1=pixelTemX- Math.tan(angle)*r*delta/param;</span><br><span class="line">                pixelY1=pixelTemY+Math.tan(angle)*r/param;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            var pointArrow=map.pixelToPoint(new BMap.Pixel(pixelX,pixelY));</span><br><span class="line">            var pointArrow1=map.pixelToPoint(new BMap.Pixel(pixelX1,pixelY1));</span><br><span class="line">            var Arrow = new BMap.Polyline([</span><br><span class="line">                pointArrow,</span><br><span class="line">             linePoint[i],</span><br><span class="line">                pointArrow1</span><br><span class="line">            ], &#123;strokeColor:&quot;blue&quot;, strokeWeight:5, strokeOpacity:0.5&#125;);</span><br><span class="line">            map.addOverlay(Arrow);</span><br><span class="line">            return Arrow;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>以上为带箭头的折线绘制，这时候可能有人会问， 始末点标注怎么没有创建？其实我一开始是在获取经纬度之后直接创建标注了，但是毕竟后面有创建带信息窗口的标注的需求，何不封装一个创建标注函数，哪里需要就直接调用呢？所以我是把创建标注和窗口这部分单独拿出来了。</p></li></ul><ol start="3"><li>创建标注点，点击时弹出信息窗口<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function addMarkerInfo(markerInfo)&#123;</span><br><span class="line">    for(i=0;i&lt;markerInfo.length;i++)&#123;</span><br><span class="line">        var marker = new BMap.Marker(new BMap.Point(markerInfo[i].lng,markerInfo[i].lat));  // 创建标注</span><br><span class="line">            map.addOverlay(marker);               // 将标注添加到地图中</span><br><span class="line">        if(markerInfo[i].info)&#123;</span><br><span class="line">            info = markerInfo[i].info.replace(/:/g,&quot;=&quot;)</span><br><span class="line">            addClickHandler(info,marker);</span><br><span class="line">            console.log(info);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            markerInfo[i].info = &quot;未添加信息&quot;;</span><br><span class="line">            addClickHandler(markerInfo[i].info,marker);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li><p>为标注绑定 click 点击事件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function addClickHandler(content,marker)&#123;</span><br><span class="line">    marker.addEventListener(&quot;onclick&quot;,function(e)&#123;</span><br><span class="line">        openInfo(content,e)&#125;</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>对窗口进行设置 enableAutoPan 是否支持拖拽后自动移回；enableMessage 是否支持手机短信</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var opts = &#123;</span><br><span class="line">    width : 250,     // 信息窗口宽度</span><br><span class="line">    height: 80,     // 信息窗口高度</span><br><span class="line">    title : &quot;信息窗口&quot; , // 信息窗口标题</span><br><span class="line">    enableAutoPan: false,</span><br><span class="line">    enableMessage: false,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>打开信息窗口，获取被点击的标注经纬度，在该位置创建窗口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    function openInfo(content,e)&#123;</span><br><span class="line">        var p = e.target;</span><br><span class="line">        var point = new BMap.Point(p.getPosition().lng, p.getPosition().lat);</span><br><span class="line">        var infoWindow = new BMap.InfoWindow(content,opts);  // 创建信息窗口对象 </span><br><span class="line">        map.openInfoWindow(infoWindow,point); //开启信息窗口</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ol start="4"><li>创建热力图<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">function addHeat(heatPoints)&#123;</span><br><span class="line">    var heatmapOverlay = new BMapLib.HeatmapOverlay(&#123;</span><br><span class="line">        &quot;radius&quot;:10, </span><br><span class="line">        &quot;visible&quot;:true, </span><br><span class="line">        &quot;opacity&quot;:70 , </span><br><span class="line">        &quot;gradient&quot;:&#123;</span><br><span class="line">            0:&apos;rgba(255, 255, 255, 0.5)&apos;,</span><br><span class="line">            0.25:&apos;rgb(0,0,255)&apos;,</span><br><span class="line">            .5:&apos;rgb(0, 255, 0)&apos;,</span><br><span class="line">            0.75:&apos;rgb(255,255,0)&apos;,</span><br><span class="line">            1:&apos;rgb(255, 0, 0)&apos;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    map.addOverlay(heatmapOverlay);</span><br><span class="line">    var heatPoints = heatPoints;</span><br><span class="line">    heatmapOverlay.setDataSet(&#123;data:heatPoints,max:100&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li>热力图的点直接传入json字符串即可自动识别，无需获取经纬度后手动创建点，所以热力图这部分代码量较少。</li></ul><h1 id="一些小优化"><a href="#一些小优化" class="headerlink" title="一些小优化"></a>一些小优化</h1><ol><li>map必须设置高度，否则不显示，所以不能使用流体布局，但是高度又希望自适应，所以最后的想法是获取窗口高度然后赋值给height<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">height = $(window).height();</span><br><span class="line">$(&quot;#map_container&quot;).css(&quot;height&quot;,height);</span><br></pre></td></tr></table></figure></li></ol><ul><li>注意要在map初始化之前完成。</li></ul><ol start="2"><li><p>之前使用 window.onload() ,发现绘制图形简直不是一点点的慢，像页面卡住了一样。原来 window.onload() 是页面全部加载完成之后执行，包括图片文件等，这样看来慢是正常的了，所以果断换成DOM加载完成后执行，改为如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(document).ready(function()&#123;</span><br><span class="line">    getQueryVariable();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>去掉图片水印，当然不是需要PS的那种，是在地图图层上的 div 。这个问题困扰我2天了，之前是想用 remove() 去掉，但是必须先渲染出来才能 remove ，所以效果就是先出现一下，然后瞬间被 remove ，但是还是有一瞬间能看见水印，不符合需求。最后实现的想法是，直接给这个 div 加一个 display:none 的 css。之前一直在纠结想从根源上去除，转变一下思路瞬间就解决了，而且还很简单。下次还是要多考虑几个方案。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;绘制两点间带箭头的线段，起点终点使用标注标记并点击标注弹出信息窗口。&lt;/li&gt;
&lt;li&gt;绘制热力图，根据点坐标及权重（权重越大，
      
    
    </summary>
    
      <category term="前端学习" scheme="https://wsrdadian.github.io/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="百度地图" scheme="https://wsrdadian.github.io/tags/%E7%99%BE%E5%BA%A6%E5%9C%B0%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>百度地图瓦片相关问题</title>
    <link href="https://wsrdadian.github.io/2019/03/15/%E7%99%BE%E5%BA%A6%E5%9C%B0%E5%9B%BE%E7%93%A6%E7%89%87%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/"/>
    <id>https://wsrdadian.github.io/2019/03/15/百度地图瓦片相关问题/</id>
    <published>2019-03-15T06:52:02.000Z</published>
    <updated>2019-03-15T08:02:51.088Z</updated>
    
    <content type="html"><![CDATA[<p>百度地图的瓦片下载真的是一个巨大的工程量，我下载到15级，瓦片文件已经达到17G，其实还可以更精确一点，但是感觉电脑快跑报废了，而且目前项目要求到15级即可。</p><h1 id="瓦片下载"><a href="#瓦片下载" class="headerlink" title="瓦片下载"></a>瓦片下载</h1><h2 id="工具使用"><a href="#工具使用" class="headerlink" title="工具使用"></a>工具使用</h2><ul><li><p>瓦片下载器不是收费就是有层级限制，在前面的文章 《使用Python离线地图》中，已经使用了一个开源的python工具来下载，但是由于下载下来的瓦片组织性不强，迁移费力，以及merge时出现的内存不够，电脑卡死等问题，不得不重新寻找下载瓦片并保证离线地图能正常使用的方法，经过一个周末终于找到了一个免费的下载器： BaiduMapTile。</p></li><li><p>进入 BaiduMapTile\BaiduMapTile\bin\Debug\BaiduMapTile.exe 填写经纬度，瓦片自动下载到 \BaiduMapTile\BaiduMapTile\bin\Debug\html\maptile 目录下，并按照经纬度自动创建文件目录，这次的方式，无需合成瓦片，在显示时，会按照经纬度自动寻找相应的文件目录，显示瓦片。</p></li></ul><h2 id="离线地图使用"><a href="#离线地图使用" class="headerlink" title="离线地图使用"></a>离线地图使用</h2><ul><li>瓦片下载完成后，将瓦片文件复制到 BaiduMapTile\html\maptile 文件夹中，并按照 map.txt 对apiv2.0_street.js 进行修改，为了避免控制台报错，在 1494 行将 appendChild 去掉，避免生成调用在线API的 head 文件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document.getElementsByTagName(&quot;head&quot;)[0];//.appendChild(d)</span><br></pre></td></tr></table></figure></li></ul><h1 id="百度地图API调用"><a href="#百度地图API调用" class="headerlink" title="百度地图API调用"></a>百度地图API调用</h1><h2 id="画折线"><a href="#画折线" class="headerlink" title="画折线"></a>画折线</h2><ol><li><p>在百度API文档中下载 CurveLine.js 文件，并引入</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;js/CurveLine.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>渲染地图，并画一条简单的折线</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var map = new BMap.Map(&quot;container&quot;,&#123;mapType: BMAP_NORMAL_MAP&#125;); </span><br><span class="line">var point = new BMap.Point(116.404, 39.915);    // 创建点坐标  </span><br><span class="line">map.centerAndZoom(point,15);             // 初始化地图,设置中心点坐标和地图级别。  </span><br><span class="line">//map.addControl(new BMap.MapTypeControl());  </span><br><span class="line">map.addControl(new BMap.NavigationControl());  </span><br><span class="line">map.enableScrollWheelZoom();                  // 启用滚轮放大缩小。  </span><br><span class="line">map.enableKeyboard();                         // 启用键盘操作。   </span><br><span class="line">var polyline = new BMap.Polyline([</span><br><span class="line">new BMap.Point(116.399, 39.910),</span><br><span class="line">new BMap.Point(116.405, 39.920),</span><br><span class="line">new BMap.Point(116.423493, 39.907445)</span><br><span class="line">], &#123;strokeColor:&quot;blue&quot;, strokeWeight:2, strokeOpacity:0.5&#125;);   //创建折线</span><br><span class="line">map.addOverlay(polyline);   //增加折线</span><br></pre></td></tr></table></figure></li></ol><h2 id="热力图"><a href="#热力图" class="headerlink" title="热力图"></a>热力图</h2><ol><li><p>在百度API文档中下载 CurveLine.js 文件，并引入<a href="http://api.map.baidu.com/library/Heatmap/2.0/src/heatmap.js" target="_blank" rel="noopener">Heatmap.js</a></p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;js/Heatmap.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>创建一些热力点，一般放在JSON文件中调用,例如：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var points =[</span><br><span class="line">&#123;&quot;lng&quot;:116.418261,&quot;lat&quot;:39.921984,&quot;count&quot;:50&#125;,</span><br><span class="line">&#123;&quot;lng&quot;:116.423332,&quot;lat&quot;:39.916532,&quot;count&quot;:51&#125;,</span><br><span class="line">&#123;&quot;lng&quot;:116.419787,&quot;lat&quot;:39.930658,&quot;count&quot;:15&#125;,</span><br><span class="line">&#123;&quot;lng&quot;:116.418455,&quot;lat&quot;:39.920921,&quot;count&quot;:40&#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure></li><li><p>渲染热力图</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var heatmapOverlay = new BMapLib.HeatmapOverlay(&#123;</span><br><span class="line">&quot;radius&quot;:10, </span><br><span class="line">&quot;visible&quot;:true, </span><br><span class="line">&quot;opacity&quot;:70 , </span><br><span class="line">&quot;gradient&quot;:&#123;</span><br><span class="line">0:&apos;rgba(255, 255, 255, 0.5)&apos;,</span><br><span class="line">0.25:&apos;rgb(0,0,255)&apos;,</span><br><span class="line">.5:&apos;rgb(0, 255, 0)&apos;,</span><br><span class="line">0.75:&apos;rgb(255,255,0)&apos;,</span><br><span class="line">1:&apos;rgb(255, 0, 0)&apos;</span><br><span class="line">&#125;&#125;);</span><br><span class="line">map.addOverlay(heatmapOverlay);</span><br><span class="line">heatmapOverlay.setDataSet(&#123;data:points,max:100&#125;);</span><br></pre></td></tr></table></figure></li></ol><ul><li>gradient 为热力图点的渐变颜色，radius 每个点的半径，visible 是否展示热力图，opacity 热力的透明度</li></ul><h1 id="下一步任务"><a href="#下一步任务" class="headerlink" title="下一步任务"></a>下一步任务</h1><p>将离线出来的地图封装成一个小工具，数据全部采用Json格式接口调用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;百度地图的瓦片下载真的是一个巨大的工程量，我下载到15级，瓦片文件已经达到17G，其实还可以更精确一点，但是感觉电脑快跑报废了，而且目前项目要求到15级即可。&lt;/p&gt;
&lt;h1 id=&quot;瓦片下载&quot;&gt;&lt;a href=&quot;#瓦片下载&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="前端学习" scheme="https://wsrdadian.github.io/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="百度地图" scheme="https://wsrdadian.github.io/tags/%E7%99%BE%E5%BA%A6%E5%9C%B0%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>React基础学习（一）</title>
    <link href="https://wsrdadian.github.io/2019/03/13/React%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>https://wsrdadian.github.io/2019/03/13/React基础学习（一）/</id>
    <published>2019-03-13T03:20:57.000Z</published>
    <updated>2019-03-15T08:03:36.496Z</updated>
    
    <content type="html"><![CDATA[<p>在安装 React 之前需要安装 Node 环境和 NPM 环境</p><h1 id="安装并运行"><a href="#安装并运行" class="headerlink" title="安装并运行"></a>安装并运行</h1><ol><li><p>安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g create-react-app</span><br><span class="line">C:\Users\Administrator\AppData\Roaming\npm\create-react-app -&gt; C:\Users\Administrator\AppData\Roaming\npm\node_modules\create-react-app\index.js</span><br><span class="line">+ create-react-app@2.1.8</span><br><span class="line">added 63 packages from 20 contributors in 15.223s</span><br></pre></td></tr></table></figure></li><li><p>创建一个项目</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">$ create-react-app my-new-app</span><br><span class="line"></span><br><span class="line">Creating a</span><br><span class="line"> new React app in F:\web\react\my-new-app.</span><br><span class="line"></span><br><span class="line">Installing packages. This might take a couple of minutes.</span><br><span class="line">Installing react, react-dom, and react-scripts...</span><br><span class="line"></span><br><span class="line">+ react-dom@16.8.4</span><br><span class="line">+ react-scripts@2.1.8</span><br><span class="line">+ react@16.8.4</span><br><span class="line">added 1839 packages from 718 contributors and audited 36232 packages in 301.026s</span><br><span class="line">found 63 low severity vulnerabilities</span><br><span class="line">  run `npm audit fix` to fix them, or `npm audit` for details</span><br><span class="line"></span><br><span class="line">Initialized a git repository.</span><br><span class="line"></span><br><span class="line">Success! Created my-new-app at F:\web\react\my-new-app</span><br><span class="line">Inside that directory, you can run several commands:</span><br><span class="line"></span><br><span class="line">  npm start</span><br><span class="line">    Starts the development server.</span><br><span class="line"></span><br><span class="line">  npm run build</span><br><span class="line">    Bundles the app into static files for production.</span><br><span class="line"></span><br><span class="line">  npm test</span><br><span class="line">    Starts the test runner.</span><br><span class="line"></span><br><span class="line">  npm run eject</span><br><span class="line">    Removes this tool and copies build dependencies, configuration files</span><br><span class="line">    and scripts into the app directory. If you do this, you can’t go back!</span><br><span class="line"></span><br><span class="line">We suggest that you begin by typing:</span><br><span class="line"></span><br><span class="line">  cd my-new-app</span><br><span class="line">  npm start</span><br><span class="line"></span><br><span class="line">Happy hacking!</span><br></pre></td></tr></table></figure></li><li><p>运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ cd my-new-app/</span><br><span class="line"></span><br><span class="line">Administrator@KHMD9Q7MXH8OBVI MINGW64 /f/web/react/my-new-app (master)</span><br><span class="line">$ npm start</span><br><span class="line"></span><br><span class="line">&gt; my-new-app@0.1.0 start F:\web\react\my-new-app</span><br><span class="line">&gt; react-scripts start</span><br><span class="line"></span><br><span class="line">Starting the development server...</span><br><span class="line"></span><br><span class="line">Compiled successfully!</span><br><span class="line"></span><br><span class="line">You can now view my-new-app in the browser.</span><br><span class="line"></span><br><span class="line">  Local:            http://localhost:3000/</span><br><span class="line">  On Your Network:  http://192.168.1.101:3000/</span><br><span class="line"></span><br><span class="line">Note that the development build is not optimized.</span><br><span class="line">To create a production build, use npm run build.</span><br></pre></td></tr></table></figure></li></ol><h1 id="下一步任务"><a href="#下一步任务" class="headerlink" title="下一步任务"></a>下一步任务</h1><p>React脚手架安装完成，接下来是完成一个ToDoList练习。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在安装 React 之前需要安装 Node 环境和 NPM 环境&lt;/p&gt;
&lt;h1 id=&quot;安装并运行&quot;&gt;&lt;a href=&quot;#安装并运行&quot; class=&quot;headerlink&quot; title=&quot;安装并运行&quot;&gt;&lt;/a&gt;安装并运行&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;安装&lt;/p&gt;
&lt;f
      
    
    </summary>
    
      <category term="前端学习" scheme="https://wsrdadian.github.io/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="React" scheme="https://wsrdadian.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>Metronic学习之路(二)</title>
    <link href="https://wsrdadian.github.io/2019/03/13/Metronic%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF-%E4%BA%8C/"/>
    <id>https://wsrdadian.github.io/2019/03/13/Metronic学习之路-二/</id>
    <published>2019-03-13T01:28:16.000Z</published>
    <updated>2019-03-13T03:18:48.585Z</updated>
    
    <content type="html"><![CDATA[<p>进行框架搭建基础搭建，进行模块化，保持每个页面局部集中；排除不需要的文件和插件。</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><ul><li>假定你在 7 个可用的子主题中选择了 Admin 1(admin_1) 子主题。</li><li>这个主题有两个部分. 首先是包含了所有 css、js和第三方插件的 assets 文件夹，接着是包含实际 HTML 模板的模板文件夹。可以参考启动时调用的 theme/assets 和 theme/admin_1。</li><li>theme/assets 的 layout 文件夹里你可以发现有 7 个独立的 layout 文件夹（如 layout，layou2, … layout7）,你可以保留你用到的 theme/assets/layouts/layout 和 theme/layouts/global 然后将你用不到的 layout 文件夹删除。 这样在theme/assets/layouts 文件夹里你就只有 theme/assets/layouts/layout 和 theme/assets/layouts/global 两个文件夹了。</li><li>theme/admin_1 文件夹在 layout_blank_page.html 打开时被引用。这个模板包括了压缩后的 css、js 和第三方插件。你可以用此模板作为你应用程序的起点。试着将 layout_blank_page.html 的代码分离成模块化(header, sidebar, footer, main content)，并保持每个页面局部集中。</li><li>在第三方插件文件夹(theme/assets/global/plugins)，你可以排除你用不到的插件. 默认 Metronic 包括 80 个第三方插件， 大部分主题你不会用到，你可以将他们排除。</li><li>参考:<a href="https://www.cnblogs.com/yanjialin/p/6003475.html" target="_blank" rel="noopener">Metronic学习之路</a></li></ul><h1 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h1><p>参考文章：<a href="https://www.cnblogs.com/smark/p/9789472.html" target="_blank" rel="noopener">传统HTML页面实现模块化加载</a>  <a href="https://www.cnblogs.com/doublenet/p/5102759.html" target="_blank" rel="noopener">网站需要模块化的原因</a>  <a href="https://blog.csdn.net/wsymcxy/article/details/82178194" target="_blank" rel="noopener">Web前端主流模块化框架的区别</a>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;进行框架搭建基础搭建，进行模块化，保持每个页面局部集中；排除不需要的文件和插件。&lt;/p&gt;
&lt;h1 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;假定你在 7 个可用的子主题中选
      
    
    </summary>
    
      <category term="前端学习" scheme="https://wsrdadian.github.io/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Metronic" scheme="https://wsrdadian.github.io/tags/Metronic/"/>
    
  </entry>
  
  <entry>
    <title>Metronic学习之路(一)</title>
    <link href="https://wsrdadian.github.io/2019/03/12/Metronic%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF-%E4%B8%80/"/>
    <id>https://wsrdadian.github.io/2019/03/12/Metronic学习之路-一/</id>
    <published>2019-03-12T01:42:47.000Z</published>
    <updated>2019-03-12T09:25:21.851Z</updated>
    
    <content type="html"><![CDATA[<p>使用GULP构建工具对Metronic进行管理</p><h1 id="部署gulp"><a href="#部署gulp" class="headerlink" title="部署gulp"></a>部署gulp</h1><ol><li>打开终端并进入到 Metronic 的 theme 根目录，运行以下代码<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install //安装程序的依赖包</span><br></pre></td></tr></table></figure></li></ol><ul><li>发现 <em>npm install</em> 报 <em>node-sass</em> 错误<br>原因: <em>npm install</em> 的时候所下载的 <em>node-sass</em> 文件夹是空的<br>在 <em>C:\Users\admin\AppData\Roaming\npm-cache\node-sass\3.13.1</em> 下面可以看到<br>解决方法:自己单独用 <em>npm i node-sass</em> 下载一遍<br>会在 <em>C:\Users\姓名AppData\Roaming\npm-cache\node-sass\4.7.2</em> 下面会有一个文件<br><em>win32-x64-57_binding.node</em> ,把这个文件复制到 <em>3.13.1</em> 下面然后重新 <em>npm install</em> 就解决了</li></ul><ol start="2"><li><p>全局安装gulp</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install gulp -g</span><br></pre></td></tr></table></figure></li><li><p>测试 <em>gulp</em>，在终端输入 gulp</p></li></ol><ul><li><p>报错 <em>Cannot find module ‘gulp-prettify’</em> 模块找不到<br>进入 <a href="https://www.npmjs.com" target="_blank" rel="noopener">npm</a>  搜索包名并安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i gulp-prettify</span><br></pre></td></tr></table></figure></li><li><p>再次执行 gulp 命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gulp</span><br></pre></td></tr></table></figure></li><li><p>出现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ gulp</span><br><span class="line">[09:53:07] Using gulpfile F:\web\metronic_v4.5.2\theme\gulpfile.js</span><br><span class="line">[09:53:07] Task never defined: default</span><br><span class="line">[09:53:07] To list available tasks, try running: gulp --tasks</span><br></pre></td></tr></table></figure></li><li><p>说明 gulp 部署成功，只是默认任务还没有配置,需要看看 <em>gulpfile.js</em> 列出的其他任务。</p></li></ul><ol start="4"><li>如果有其他问题，请参考<br><a href="https://segmentfault.com/a/1190000006804354?_ea=1135407" target="_blank" rel="noopener">初探前端自动化神器（Gulp）</a><br><a href="https://www.cnblogs.com/telwanggs/p/7065414.html" target="_blank" rel="noopener">Bootstrap 之 Metronic 模板的学习之路 - （7）GULP 前端自动化工具</a></li></ol><h1 id="gulp-任务运用"><a href="#gulp-任务运用" class="headerlink" title="gulp 任务运用"></a>gulp 任务运用</h1><h2 id="gulp-localhost"><a href="#gulp-localhost" class="headerlink" title="gulp localhost"></a>gulp localhost</h2><ul><li><p>安装 <em>Connect</em> 插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install--save-dev gulp-connect</span><br></pre></td></tr></table></figure></li><li><p><em>npm install –save-dev</em> 可以简化为 <em>npm i -D</em></p></li><li><p>为 web 服务器定义一个任务， <em>gulpfile.js</em> 文件中添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gulp.task(&apos;localhost&apos;, function() &#123;</span><br><span class="line">  connect.server();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>只要在终端/命令行中执行 gulp, 就可以启动 web 服务器，然后可以在浏览器中打开 <em>localhost:8080</em></p></li></ul><h2 id="gulp-localhost-live"><a href="#gulp-localhost-live" class="headerlink" title="gulp localhost-live"></a>gulp localhost-live</h2><ul><li>给 <em>connect.server()</em> 方法传入一个参数<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">gulp.task(&apos;localhost-live&apos;, function() &#123;</span><br><span class="line">  connect.server(&#123;</span><br><span class="line">    livereload: true</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h1 id="SASS-编译"><a href="#SASS-编译" class="headerlink" title="SASS 编译"></a>SASS 编译</h1><h2 id="gulp-sass"><a href="#gulp-sass" class="headerlink" title="gulp sass"></a>gulp sass</h2><p>打开终端进入到 <em>gulpfile.js</em> 所在的 <em>theme</em> 目录。输入 <em>gulp sass</em> 命令执行手工构建任务。</p><ol><li>发现报错 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">It&apos;s not clear which file to import for &apos;@import &quot;file&quot;&apos;.</span><br></pre></td></tr></table></figure></li></ol><ul><li>由于 sass <em>_filename.scss</em> 不允许出现 同名无下划线 <em>filename.scss</em> ,写文件全称试试</li><li>解决：<em>components-md.scss</em> 中<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@import &apos;_components.scss&apos;;</span><br></pre></td></tr></table></figure></li></ul><ol start="2"><li>继续执行 <em>gulp sass</em>,发现报错<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Message:</span><br><span class="line">    sass\global\_components.scss</span><br><span class="line">Error: Import directives may not be used within control directives or mixins.</span><br><span class="line">        on line 7 of sass/global/_components.scss</span><br><span class="line">        from line 8 of sass/global/components-md.scss</span><br></pre></td></tr></table></figure></li></ol><ul><li><p>解决：<em>_components.scss</em> 中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// General CSS Reset</span><br><span class="line">@if $theme-style == &quot;square&quot; &#123; </span><br><span class="line">@import &apos;components/_reset-rounds&apos;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>去掉 <em>@if</em> 判断</p></li></ul><ol start="3"><li>继续执行 <em>gulp sass</em> ,出现新的报错<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Error: Undefined variable: &quot;$general-border-radius&quot;.</span><br><span class="line">       on line 134 of sass/apps/inbox.scss</span><br><span class="line">       border-radius: $general-border-radius;</span><br></pre></td></tr></table></figure></li></ol><ul><li><p>解决：<em>global/_variables.scss</em> 中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@if $theme-type == &quot;material-design&quot; &#123;</span><br><span class="line">$general-border-radius:       2px !default;</span><br><span class="line">&#125; @else &#123;</span><br><span class="line">$general-border-radius:       4px !default;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在 <em>@if</em> 前添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$general-border-radius:       2px !default;</span><br></pre></td></tr></table></figure></li></ul><ol start="4"><li>继续执行 <em>gulp sass</em> ,出现新的报错<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">The following tasks did not complete: testGulp </span><br><span class="line">Did you forget to signal async completion?</span><br></pre></td></tr></table></figure></li></ol><ul><li>官方方法<br>在不使用文件流的情况下，向task的函数里传入一个名叫done的回调函数，以结束task。<a href="https://blog.csdn.net/weixin_40817115/article/details/81079507" target="_blank" rel="noopener">参考</a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gulp.task(&apos;testGulp&apos;, done =&gt; &#123;</span><br><span class="line">  console.log(&apos;Hello World!&apos;);</span><br><span class="line">  done();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h2 id="gulp-sass-watch"><a href="#gulp-sass-watch" class="headerlink" title="gulp sass:watch"></a>gulp sass:watch</h2><ol><li>输入 <em>gulp sass:watch</em> 运行 scss 实时监控 css 文件的编译，编译后的 css 文件会输出到 <em>assets</em> 目录。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Error: watching ./sass/**/*.scss: watch task has to be a function (optionally generated by using gulp.parallel or gulp.series)</span><br><span class="line">    at Gulp.watch (F:\web\metronic_v4.5.2\theme\node_modules\gulp\index.js:28:11)</span><br><span class="line">    at F:\web\metronic_v4.5.2\theme\gulpfile.js:59:10</span><br><span class="line">    at taskWrapper (F:\web\metronic_v4.5.2\theme\node_modules\undertaker\lib\set-task.js:13:15)</span><br><span class="line">    at bound (domain.js:395:14)</span><br><span class="line">    at runBound (domain.js:408:12)</span><br><span class="line">    at asyncRunner (F:\web\metronic_v4.5.2\theme\node_modules\async-done\index.js:55:18)</span><br><span class="line">    at process._tickCallback (internal/process/next_tick.js:61:11)</span><br></pre></td></tr></table></figure></li></ol><ul><li>分析：<br>这个是由于require引入的包的版本问题导致的。在不同的版本里，接口参数发生了变化。在gulp4.0之后已经只能接受watch第二个参数必须为函数。<br>解决办法：修改gulpfile.js<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gulp.task(&apos;sass:watch&apos;, function () &#123;</span><br><span class="line">gulp.watch(&apos;./sass/**/*.scss&apos;,gulp.series(&apos;sass&apos;));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h1 id="RTL-SASS-编译"><a href="#RTL-SASS-编译" class="headerlink" title="RTL SASS 编译"></a>RTL SASS 编译</h1><ul><li>因为 RTL 的主题文件和默认的主题文件不在同一个目录，一个在 theme_rtl ，一个在 theme，所以，在 theme_rtl 目录下，需要对 gulp 进行重新部署。</li><li>然后进入 gulpfile.js 位于的 <em>theme_rtl</em> 目录。<br>确定最新修改的 SCSS 已通过 gulp sass 或 gulp sass:watch 命令编译。<br>运行 <em>gulp rtlcss</em> 命令执行 css 文件的 RTL 版本修改任务。<br>编译后的 RTL css 会被输出到 <em>assets</em> 目录.</li></ul><h1 id="CSS-和-JS-文件的压缩"><a href="#CSS-和-JS-文件的压缩" class="headerlink" title="CSS 和 JS 文件的压缩"></a>CSS 和 JS 文件的压缩</h1><ul><li>在命令行下进入 theme 目录。运行 <em>gulp minify</em> 执行 css 和 js 文件压缩任务.<br>压缩后的文件会输出到 <em>html</em> 目录.</li></ul><h1 id="HTML-格式化"><a href="#HTML-格式化" class="headerlink" title="HTML 格式化"></a>HTML 格式化</h1><ul><li><em>gulp prettify</em> 该命令可以将 HTML 格式化缩进，对于 pre 和 code 两个标签内的内容不进行格式化。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;使用GULP构建工具对Metronic进行管理&lt;/p&gt;
&lt;h1 id=&quot;部署gulp&quot;&gt;&lt;a href=&quot;#部署gulp&quot; class=&quot;headerlink&quot; title=&quot;部署gulp&quot;&gt;&lt;/a&gt;部署gulp&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;打开终端并进入到 Metronic
      
    
    </summary>
    
      <category term="前端学习" scheme="https://wsrdadian.github.io/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Metronic" scheme="https://wsrdadian.github.io/tags/Metronic/"/>
    
  </entry>
  
  <entry>
    <title>没有密码怎么进入系统</title>
    <link href="https://wsrdadian.github.io/2019/03/08/%E6%B2%A1%E6%9C%89%E5%AF%86%E7%A0%81%E6%80%8E%E4%B9%88%E8%BF%9B%E5%85%A5%E7%B3%BB%E7%BB%9F/"/>
    <id>https://wsrdadian.github.io/2019/03/08/没有密码怎么进入系统/</id>
    <published>2019-03-08T02:10:58.000Z</published>
    <updated>2019-03-08T02:33:14.974Z</updated>
    
    <content type="html"><![CDATA[<p>很无脑的操作，只需要一个U启</p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><ul><li>一个U盘启动器（平时用来装系统的，我的是 <a href="http://www.laoyouxitong.com" target="_blank" rel="noopener">老友</a> 老毛桃也可以）</li><li>查找电脑主机型号所对应的 <a href="http://baijiahao.baidu.com/s?id=1599537907270132743&amp;wfr=spider&amp;for=pc" target="_blank" rel="noopener">BOIS</a> 系统进入按键</li></ul><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ol><li>进入 BIOS ，选择进入 USB 系统</li><li>使用密码破解功能，选择你想破解的用户，或者直接破解管理员</li><li>关机重新启动，选择管理员登录（或者使用你修改了密码以后的用户）</li><li>登录管理员账户后进入控制面板<a href="https://jingyan.baidu.com/article/25648fc1cb6af69191fd00d9.html" target="_blank" rel="noopener">创建新的账户</a></li><li>关机，登录自己的新账户</li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>千万不要让陌生人的U盘接近自己的电脑</li><li>做一个U启随身带着以防不时之需</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;很无脑的操作，只需要一个U启&lt;/p&gt;
&lt;h1 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;一个U盘启动器（平时用来装系统的，我的是 &lt;a href=&quot;http
      
    
    </summary>
    
      <category term="系统" scheme="https://wsrdadian.github.io/categories/%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="Windows" scheme="https://wsrdadian.github.io/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>地图离线之瓦片下载-python+PIL</title>
    <link href="https://wsrdadian.github.io/2019/03/06/%E4%BD%BF%E7%94%A8python%E7%A6%BB%E7%BA%BF%E5%9C%B0%E5%9B%BE/"/>
    <id>https://wsrdadian.github.io/2019/03/06/使用python离线地图/</id>
    <published>2019-03-06T01:25:54.000Z</published>
    <updated>2019-03-15T06:53:41.862Z</updated>
    
    <content type="html"><![CDATA[<p>使用python下载瓦片</p><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ol><li><a href="https://www.python.org/downloads/" target="_blank" rel="noopener">python3.7</a> 内置pip，使用比较方便</li><li>PIL只支持到 python2.7,在3.7之后，使用 <a href="https://pypi.org/project/Pillow/" target="_blank" rel="noopener">pillow</a> 效果相同<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install Pillow</span><br></pre></td></tr></table></figure></li></ol><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><ul><li><a href="https://github.com/muxfe/BaiduMap_tiles" target="_blank" rel="noopener">github链接</a></li><li>按照md文件进行自定义操作</li></ul><h1 id="修改了一些代码"><a href="#修改了一些代码" class="headerlink" title="修改了一些代码"></a>修改了一些代码</h1><ol><li>gmap_utils.py 文件中ak值换成自己申请的</li><li><p>download_tiles.py 文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">query = &quot;qt=tile&amp;x=%d&amp;y=%d&amp;z=%d&amp;styles=%s%s&amp;udt=20190307&quot; % (x, y, zoom, styles, scaler)</span><br><span class="line">url = &quot;http://online0.map.bdimg.com/onlinelabel/?&quot; + query</span><br><span class="line">path = &quot;%d_%d_%d_r&quot; % (zoom ,x, y)</span><br><span class="line">filename = path + &quot;.png&quot;</span><br></pre></td></tr></table></figure></li><li><p>merge_tiles.py 文件</p></li></ol><ul><li><p>由于原代码中文件路径和文件名与该文件中的要求不符，所以修改filename使其符合要求</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filename = &quot;tile/%d_%d_%d_%s.%s&quot; % (zoom, x, y, TYPE, ext)</span><br></pre></td></tr></table></figure></li><li><p>生成的图片加层级标志</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result.save(&quot;map_%d_%s.%s&quot; % (zoom, TYPE, ext))</span><br></pre></td></tr></table></figure></li></ul><h1 id="仍然存在的一些问题"><a href="#仍然存在的一些问题" class="headerlink" title="仍然存在的一些问题"></a>仍然存在的一些问题</h1><ol><li>请求次数过多时，出现10060错误，目前只是重新获取，应该需要对 REQUEST 进行深入研究</li><li>级别过高时，合并图片出现内存溢出错误，初步判断为 python 内存设置问题，需继续研究</li><li>若合并时内存问题不能解决，高层级可以先获取省级，再逐个将省级合并为国家级，此时应写出新的 python 的图像合成文件</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;使用python下载瓦片&lt;/p&gt;
&lt;h1 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://www.python.org/downloads/&quot; 
      
    
    </summary>
    
      <category term="python" scheme="https://wsrdadian.github.io/categories/python/"/>
    
    
      <category term="百度地图" scheme="https://wsrdadian.github.io/tags/%E7%99%BE%E5%BA%A6%E5%9C%B0%E5%9B%BE/"/>
    
      <category term="python" scheme="https://wsrdadian.github.io/tags/python/"/>
    
      <category term="PIL" scheme="https://wsrdadian.github.io/tags/PIL/"/>
    
  </entry>
  
  <entry>
    <title>使用vue.js2.5+cube-ui仿饿了么APP-项目准备工作</title>
    <link href="https://wsrdadian.github.io/2019/01/15/%E4%BD%BF%E7%94%A8vue-js2-5-cube-ui%E4%BB%BF%E9%A5%BF%E4%BA%86%E4%B9%88APP-%E9%A1%B9%E7%9B%AE%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/"/>
    <id>https://wsrdadian.github.io/2019/01/15/使用vue-js2-5-cube-ui仿饿了么APP-项目准备工作/</id>
    <published>2019-01-15T08:31:21.000Z</published>
    <updated>2019-01-15T11:46:51.891Z</updated>
    
    <content type="html"><![CDATA[<p>进行项目准备，安装 vue、cube-ui 并测试 api 数据接口。</p><h1 id="vue-安装"><a href="#vue-安装" class="headerlink" title="vue 安装"></a><a href="https://cli.vuejs.org/zh/guide/installation.html" target="_blank" rel="noopener">vue</a> 安装</h1><ol><li><p>安装vue-cli</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br><span class="line">vue --version</span><br></pre></td></tr></table></figure></li><li><p>创建项目</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create 项目名</span><br></pre></td></tr></table></figure><p> <em>选择相应配置</em></p></li><li><p>测试项目是否能够成功运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd 项目名</span><br><span class="line">npm run serve</span><br></pre></td></tr></table></figure><p> <em>访问 <a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a></em></p></li></ol><h1 id="cube-ui安装"><a href="#cube-ui安装" class="headerlink" title="cube-ui安装"></a><a href="https://didi.github.io/cube-ui/#/zh-CN" target="_blank" rel="noopener">cube-ui</a>安装</h1><ul><li><p>cube-ui的 <a href="https://github.com/didi/cube-ui" target="_blank" rel="noopener">github地址</a></p></li><li><p>作为 <a href="https://github.com/cube-ui/vue-cli-plugin-cube-ui" target="_blank" rel="noopener">vue-cli 插件</a>使用 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue add cube-ui</span><br></pre></td></tr></table></figure><p>  <em>进行相关配置</em></p><blockquote><p>请仔细阅读 vue-cli 和 cube-ui 文档</p></blockquote></li></ul><h1 id="api接口mock"><a href="#api接口mock" class="headerlink" title="api接口mock"></a>api接口mock</h1><ol><li>根目录下添加 <em>./data.json</em><br>在<a href="https://github.com/ustbhuangyi/vue-sell" target="_blank" rel="noopener">项目源码</a>中下载文件，<a href="https://www.cnblogs.com/zhaoqingqing/p/5534827.html" target="_blank" rel="noopener">下载方法</a></li><li><p>在 <em>vue.config.js</em> 中添加代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const appData = require(&apos;./data.json&apos;)</span><br><span class="line">const seller = appData.seller</span><br><span class="line">const goods = appData.goods</span><br><span class="line">const ratings = appData.ratings</span><br></pre></td></tr></table></figure><p> <em>pluginOptions后添加</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">    before(app) &#123;</span><br><span class="line">      app.get(&apos;/api/seller&apos;,function(req,res) &#123;</span><br><span class="line">        res.json(&#123;</span><br><span class="line">          errno: 0,</span><br><span class="line">          data: seller</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">      app.get(&apos;/api/goods&apos;,function(req,res) &#123;</span><br><span class="line">        res.json(&#123;</span><br><span class="line">          errno: 0,</span><br><span class="line">          data: goods</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">      app.get(&apos;/api/ratings&apos;,function(req,res) &#123;</span><br><span class="line">        res.json(&#123;</span><br><span class="line">          errno: 0,</span><br><span class="line">          data: ratings</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p> <em>运行程序并访问 <a href="http://localhost:8080/api/seller" target="_blank" rel="noopener">http://localhost:8080/api/seller</a></em> 如果显示json内容则正确</p></li><li>为谷歌浏览器安装 <a href="https://www.cnblogs.com/whycxb/p/7126116.html" target="_blank" rel="noopener">jsonview</a> </li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;进行项目准备，安装 vue、cube-ui 并测试 api 数据接口。&lt;/p&gt;
&lt;h1 id=&quot;vue-安装&quot;&gt;&lt;a href=&quot;#vue-安装&quot; class=&quot;headerlink&quot; title=&quot;vue 安装&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://cli.vuej
      
    
    </summary>
    
      <category term="前端学习" scheme="https://wsrdadian.github.io/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="vue" scheme="https://wsrdadian.github.io/tags/vue/"/>
    
      <category term="cube-ui" scheme="https://wsrdadian.github.io/tags/cube-ui/"/>
    
  </entry>
  
  <entry>
    <title>修改配色为小埋色以及图标制作</title>
    <link href="https://wsrdadian.github.io/2019/01/14/%E4%BF%AE%E6%94%B9%E9%85%8D%E8%89%B2%E4%B8%BA%E5%B0%8F%E5%9F%8B%E8%89%B2%E4%BB%A5%E5%8F%8A%E5%9B%BE%E6%A0%87%E5%88%B6%E4%BD%9C/"/>
    <id>https://wsrdadian.github.io/2019/01/14/修改配色为小埋色以及图标制作/</id>
    <published>2019-01-14T12:46:27.000Z</published>
    <updated>2019-01-14T13:01:49.960Z</updated>
    
    <content type="html"><![CDATA[<p>修改博客配色为小埋色 , 主色是小埋斗篷颜色 , 部分部件是裤子的颜色 , 大部分文字为黑白.</p><h1 id="less文件"><a href="#less文件" class="headerlink" title="less文件"></a>less文件</h1><p><em>/themes/indigo/source/css/_partical/variable.less</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@darkPrimaryColor: #334432;  </span><br><span class="line">@primaryColor:  #f28135;     #主色(小埋色)</span><br><span class="line">@lightPrimaryColor: #fcddb7; #发色</span><br><span class="line">@textPrimaryColor: #fff;</span><br></pre></td></tr></table></figure></p><h1 id="修改头像背景"><a href="#修改头像背景" class="headerlink" title="修改头像背景"></a>修改头像背景</h1><p><em>/themes/indigo/source/img/brand.jpg</em></p><h1 id="图标制作"><a href="#图标制作" class="headerlink" title="图标制作"></a>图标制作</h1><ol><li>使用<a href="http://www.faviconico.org/" target="_blank" rel="noopener">ico在线制作工具</a>将图片转为 <em>.ico</em> 格式</li><li>将图片放入 <em>themes/indigo/source/img</em> 文件夹中，并修改 <em>themes/indigo</em> 中<em>_config.xml</em> 中 <em>favicon</em> 为 <em>/img/favicon.ico</em></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;修改博客配色为小埋色 , 主色是小埋斗篷颜色 , 部分部件是裤子的颜色 , 大部分文字为黑白.&lt;/p&gt;
&lt;h1 id=&quot;less文件&quot;&gt;&lt;a href=&quot;#less文件&quot; class=&quot;headerlink&quot; title=&quot;less文件&quot;&gt;&lt;/a&gt;less文件&lt;/h1&gt;&lt;p
      
    
    </summary>
    
      <category term="前端学习" scheme="https://wsrdadian.github.io/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="hexo" scheme="https://wsrdadian.github.io/tags/hexo/"/>
    
      <category term="blog" scheme="https://wsrdadian.github.io/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>使用hexo快速建立属于自己的blog</title>
    <link href="https://wsrdadian.github.io/2019/01/14/%E5%A6%82%E4%BD%BF%E7%94%A8hexo%E4%BD%95%C2%A6%C2%82%E4%BD%95%E4%BD%BF%E7%94%A8hexo%E5%BF%AB%E5%BB%BA%E7%AB%8Bblog%E5%BF%AB%E9%80%9F/"/>
    <id>https://wsrdadian.github.io/2019/01/14/如使用hexo何¦何使用hexo快建立blog快速/</id>
    <published>2019-01-14T11:30:25.000Z</published>
    <updated>2019-01-14T12:29:25.287Z</updated>
    
    <content type="html"><![CDATA[<p>使用HEXO快速搭建个性化BLOG</p><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ul><li>使用命令行工具 <a href="https://git-scm.com/download/linux" target="_blank" rel="noopener">Git</a> 管理和部署代码</li><li>安装 <a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node</a> 并安装 <a href="https://docs.npmjs.com/downloading-and-installing-node-js-and-npm" target="_blank" rel="noopener">npm</a></li></ul><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ol><li>注册 <a href="https://github.com/" target="_blank" rel="noopener">github</a> 账号并配置 ssh</li><li>在github上新建一个项目,注意项目名为 用户名.github.io</li><li><p>使用npm快速安装 <a href="https://hexo.io/" target="_blank" rel="noopener">hexo</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init  //初始化hexo</span><br><span class="line">cd hexo //进入项目文件</span><br><span class="line">npm install //安装依赖包</span><br></pre></td></tr></table></figure></li><li><p>安装喜欢的 <a href="https://hexo.io/themes/" target="_blank" rel="noopener">主题</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone 主题的下载地址.git</span><br><span class="line">npm install 主题插件</span><br></pre></td></tr></table></figure><p><em>此博客风格为 <a href="https://github.com/yscoder/hexo-theme-indigo/wiki" target="_blank" rel="noopener">indigo</a></em></p></li><li><p>主题安装完成后对 hexo 的根目录下的 _config.yml 进行修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">title:  博客标题</span><br><span class="line">subtitle: 副标题</span><br><span class="line">description: 网站描述</span><br><span class="line">language: 语言</span><br><span class="line">url: 站点网址(必填,否则会报错)</span><br><span class="line"></span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: ssh网址.git</span><br><span class="line">  branch: master</span><br><span class="line">&lt;!--其他视情况填写即可--&gt;</span><br></pre></td></tr></table></figure></li><li><p>对主题进行个性化配置,修改主题目录下的 _config.yml</p></li><li><p>生成网页 , 本地预览</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><p><em>本地预览网址: <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a></em></p></li><li><p>新建 blog</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;文章标题&quot;</span><br></pre></td></tr></table></figure><p><em>在 source/_posts 目录下会生成文章标题.md</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">title: 文章标题</span><br><span class="line">date: 2015-07-30 07:56:29 #发表日期，一般不改动</span><br><span class="line">categories: 文章分类</span><br><span class="line">tags: [github,hexo] 文章标签</span><br><span class="line">---</span><br><span class="line">正文，使用Markdown语法书写</span><br></pre></td></tr></table></figure></li><li><p>部署到 github 的项目上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p><em>部署成功会提示</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[info] Deploy done: git</span><br></pre></td></tr></table></figure></li><li><p>访问 <a href="https://github用户名.github.io" target="_blank" rel="noopener">https://github用户名.github.io</a> 查看自己的博客</p></li></ol><h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><ul><li>提示 <em>Cannot read property ‘replace’ of null</em> 错误 ——–&gt; <em>_config.yml</em> 中 url 未填写导致</li><li>代码部署未更新 ——–&gt; <em>hexo clean</em> 后执行 <em>hexo deploy</em> 即可</li><li>每次部署都需要输入 <em>github 用户名和密码</em> ———&gt; 检查 <em>_config.yml</em> 中配置的链接是 <em>ssh</em> 还是 <em>https</em> 链接</li><li>自定义的样式无效 ——-&gt; <em>_config.yml</em> 中设置 <em>cdn: false</em></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;使用HEXO快速搭建个性化BLOG&lt;/p&gt;
&lt;h1 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;使用命令行工具 &lt;a href=&quot;https://git-scm.com/do
      
    
    </summary>
    
      <category term="前端学习" scheme="https://wsrdadian.github.io/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="hexo" scheme="https://wsrdadian.github.io/tags/hexo/"/>
    
      <category term="blog" scheme="https://wsrdadian.github.io/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://wsrdadian.github.io/2019/01/14/hello-world/"/>
    <id>https://wsrdadian.github.io/2019/01/14/hello-world/</id>
    <published>2019-01-14T08:37:25.599Z</published>
    <updated>2019-01-14T08:37:25.599Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
